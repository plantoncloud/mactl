package iterm

const (
	P10kConfigScriptB64 = "IyBHZW5lcmF0ZWQgYnkgUG93ZXJsZXZlbDEwayBjb25maWd1cmF0aW9uIHdpemFyZCBvbiAyMDIxLTA3LTE4IGF0IDE4OjM2IFBEVC4KIyBCYXNlZCBvbiByb21rYXR2L3Bvd2VybGV2ZWwxMGsvY29uZmlnL3AxMGstY2xhc3NpYy56c2gsIGNoZWNrc3VtIDg2OTMuCiMgV2l6YXJkIG9wdGlvbnM6IG5lcmRmb250LWNvbXBsZXRlICsgcG93ZXJsaW5lLCBzbWFsbCBpY29ucywgY2xhc3NpYywgdW5pY29kZSwgbGlnaHQsCiMgMjRoIHRpbWUsIGFuZ2xlZCBzZXBhcmF0b3JzLCBzaGFycCBoZWFkcywgZmxhdCB0YWlscywgMiBsaW5lcywgZGlzY29ubmVjdGVkLCBubyBmcmFtZSwKIyBzcGFyc2UsIGZldyBpY29ucywgY29uY2lzZSwgdHJhbnNpZW50X3Byb21wdCwgaW5zdGFudF9wcm9tcHQ9dmVyYm9zZS4KIyBUeXBlIGBwMTBrIGNvbmZpZ3VyZWAgdG8gZ2VuZXJhdGUgYW5vdGhlciBjb25maWcuCiMKIyBDb25maWcgZm9yIFBvd2VybGV2ZWwxMGsgd2l0aCBjbGFzc2ljIHBvd2VybGluZSBwcm9tcHQgc3R5bGUuIFR5cGUgYHAxMGsgY29uZmlndXJlYCB0byBnZW5lcmF0ZQojIHlvdXIgb3duIGNvbmZpZyBiYXNlZCBvbiBpdC4KIwojIFRpcDogTG9va2luZyBmb3IgYSBuaWNlIGNvbG9yPyBIZXJlJ3MgYSBvbmUtbGluZXIgdG8gcHJpbnQgY29sb3JtYXAuCiMKIyAgIGZvciBpIGluIHswLi4yNTV9OyBkbyBwcmludCAtUG4gIiVLeyRpfSAgJWslRnskaX0keyhsOjM6OjA6KWl9JWYgIiAkeyR7KE0pJCgoaSU2KSk6IzN9OiskJ1xuJ307IGRvbmUKCiMgVGVtcG9yYXJpbHkgY2hhbmdlIG9wdGlvbnMuCididWlsdGluJyAnbG9jYWwnICctYScgJ3AxMGtfY29uZmlnX29wdHMnCltbICEgLW8gJ2FsaWFzZXMnICAgICAgICAgXV0gfHwgcDEwa19jb25maWdfb3B0cys9KCdhbGlhc2VzJykKW1sgISAtbyAnc2hfZ2xvYicgICAgICAgICBdXSB8fCBwMTBrX2NvbmZpZ19vcHRzKz0oJ3NoX2dsb2InKQpbWyAhIC1vICdub19icmFjZV9leHBhbmQnIF1dIHx8IHAxMGtfY29uZmlnX29wdHMrPSgnbm9fYnJhY2VfZXhwYW5kJykKJ2J1aWx0aW4nICdzZXRvcHQnICdub19hbGlhc2VzJyAnbm9fc2hfZ2xvYicgJ2JyYWNlX2V4cGFuZCcKCigpIHsKICBlbXVsYXRlIC1MIHpzaCAtbyBleHRlbmRlZF9nbG9iCgogICMgVW5zZXQgYWxsIGNvbmZpZ3VyYXRpb24gb3B0aW9ucy4gVGhpcyBhbGxvd3MgeW91IHRvIGFwcGx5IGNvbmZpZ3VyYXRpb24gY2hhbmdlcyB3aXRob3V0CiAgIyByZXN0YXJ0aW5nIHpzaC4gRWRpdCB+Ly5wMTBrLnpzaCBhbmQgdHlwZSBgc291cmNlIH4vLnAxMGsuenNoYC4KICB1bnNldCAtbSAnKFBPV0VSTEVWRUw5S18qfERFRkFVTFRfVVNFUil+UE9XRVJMRVZFTDlLX0dJVFNUQVRVU19ESVInCgogICMgWnNoID49IDUuMSBpcyByZXF1aXJlZC4KICBhdXRvbG9hZCAtVXogaXMtYXQtbGVhc3QgJiYgaXMtYXQtbGVhc3QgNS4xIHx8IHJldHVybgoKICAjIFRoZSBsaXN0IG9mIHNlZ21lbnRzIHNob3duIG9uIHRoZSBsZWZ0LiBGaWxsIGl0IHdpdGggdGhlIG1vc3QgaW1wb3J0YW50IHNlZ21lbnRzLgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0xFRlRfUFJPTVBUX0VMRU1FTlRTPSgKICAgICMgPT09PT09PT09PT09PT09PT09PT09PT09PVsgTGluZSAjMSBdPT09PT09PT09PT09PT09PT09PT09PT09PQogICAgIyBvc19pY29uICAgICAgICAgICAgICAgIyBvcyBpZGVudGlmaWVyCiAgICBkaXIgICAgICAgICAgICAgICAgICAgICAjIGN1cnJlbnQgZGlyZWN0b3J5CiAgICB2Y3MgICAgICAgICAgICAgICAgICAgICAjIGdpdCBzdGF0dXMKICAgICMgPT09PT09PT09PT09PT09PT09PT09PT09PVsgTGluZSAjMiBdPT09PT09PT09PT09PT09PT09PT09PT09PQogICAgbmV3bGluZSAgICAgICAgICAgICAgICAgIyBcbgogICAgcHJvbXB0X2NoYXIgICAgICAgICAgICAgIyBwcm9tcHQgc3ltYm9sCiAgKQoKICAjIFRoZSBsaXN0IG9mIHNlZ21lbnRzIHNob3duIG9uIHRoZSByaWdodC4gRmlsbCBpdCB3aXRoIGxlc3MgaW1wb3J0YW50IHNlZ21lbnRzLgogICMgUmlnaHQgcHJvbXB0IG9uIHRoZSBsYXN0IHByb21wdCBsaW5lICh3aGVyZSB5b3UgYXJlIHR5cGluZyB5b3VyIGNvbW1hbmRzKSBnZXRzCiAgIyBhdXRvbWF0aWNhbGx5IGhpZGRlbiB3aGVuIHRoZSBpbnB1dCBsaW5lIHJlYWNoZXMgaXQuIFJpZ2h0IHByb21wdCBhYm92ZSB0aGUKICAjIGxhc3QgcHJvbXB0IGxpbmUgZ2V0cyBoaWRkZW4gaWYgaXQgd291bGQgb3ZlcmxhcCB3aXRoIGxlZnQgcHJvbXB0LgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX1JJR0hUX1BST01QVF9FTEVNRU5UUz0oCiAgICAjID09PT09PT09PT09PT09PT09PT09PT09PT1bIExpbmUgIzEgXT09PT09PT09PT09PT09PT09PT09PT09PT0KICAgIHN0YXR1cyAgICAgICAgICAgICAgICAgICMgZXhpdCBjb2RlIG9mIHRoZSBsYXN0IGNvbW1hbmQKICAgIGNvbW1hbmRfZXhlY3V0aW9uX3RpbWUgICMgZHVyYXRpb24gb2YgdGhlIGxhc3QgY29tbWFuZAogICAgYmFja2dyb3VuZF9qb2JzICAgICAgICAgIyBwcmVzZW5jZSBvZiBiYWNrZ3JvdW5kIGpvYnMKICAgIGRpcmVudiAgICAgICAgICAgICAgICAgICMgZGlyZW52IHN0YXR1cyAoaHR0cHM6Ly9kaXJlbnYubmV0LykKICAgIGFzZGYgICAgICAgICAgICAgICAgICAgICMgYXNkZiB2ZXJzaW9uIG1hbmFnZXIgKGh0dHBzOi8vZ2l0aHViLmNvbS9hc2RmLXZtL2FzZGYpCiAgICB2aXJ0dWFsZW52ICAgICAgICAgICAgICAjIHB5dGhvbiB2aXJ0dWFsIGVudmlyb25tZW50IChodHRwczovL2RvY3MucHl0aG9uLm9yZy8zL2xpYnJhcnkvdmVudi5odG1sKQogICAgYW5hY29uZGEgICAgICAgICAgICAgICAgIyBjb25kYSBlbnZpcm9ubWVudCAoaHR0cHM6Ly9jb25kYS5pby8pCiAgICBweWVudiAgICAgICAgICAgICAgICAgICAjIHB5dGhvbiBlbnZpcm9ubWVudCAoaHR0cHM6Ly9naXRodWIuY29tL3B5ZW52L3B5ZW52KQogICAgZ29lbnYgICAgICAgICAgICAgICAgICAgIyBnbyBlbnZpcm9ubWVudCAoaHR0cHM6Ly9naXRodWIuY29tL3N5bmRiZy9nb2VudikKICAgIG5vZGVudiAgICAgICAgICAgICAgICAgICMgbm9kZS5qcyB2ZXJzaW9uIGZyb20gbm9kZW52IChodHRwczovL2dpdGh1Yi5jb20vbm9kZW52L25vZGVudikKICAgIG52bSAgICAgICAgICAgICAgICAgICAgICMgbm9kZS5qcyB2ZXJzaW9uIGZyb20gbnZtIChodHRwczovL2dpdGh1Yi5jb20vbnZtLXNoL252bSkKICAgIG5vZGVlbnYgICAgICAgICAgICAgICAgICMgbm9kZS5qcyBlbnZpcm9ubWVudCAoaHR0cHM6Ly9naXRodWIuY29tL2VrYWxpbmluL25vZGVlbnYpCiAgICAjIG5vZGVfdmVyc2lvbiAgICAgICAgICAjIG5vZGUuanMgdmVyc2lvbgogICAgIyBnb192ZXJzaW9uICAgICAgICAgICAgIyBnbyB2ZXJzaW9uIChodHRwczovL2dvbGFuZy5vcmcpCiAgICAjIHJ1c3RfdmVyc2lvbiAgICAgICAgICAjIHJ1c3RjIHZlcnNpb24gKGh0dHBzOi8vd3d3LnJ1c3QtbGFuZy5vcmcpCiAgICAjIGRvdG5ldF92ZXJzaW9uICAgICAgICAjIC5ORVQgdmVyc2lvbiAoaHR0cHM6Ly9kb3RuZXQubWljcm9zb2Z0LmNvbSkKICAgICMgcGhwX3ZlcnNpb24gICAgICAgICAgICMgcGhwIHZlcnNpb24gKGh0dHBzOi8vd3d3LnBocC5uZXQvKQogICAgIyBsYXJhdmVsX3ZlcnNpb24gICAgICAgIyBsYXJhdmVsIHBocCBmcmFtZXdvcmsgdmVyc2lvbiAoaHR0cHM6Ly9sYXJhdmVsLmNvbS8pCiAgICAjIGphdmFfdmVyc2lvbiAgICAgICAgICAjIGphdmEgdmVyc2lvbiAoaHR0cHM6Ly93d3cuamF2YS5jb20vKQogICAgIyBwYWNrYWdlICAgICAgICAgICAgICAgIyBuYW1lQHZlcnNpb24gZnJvbSBwYWNrYWdlLmpzb24gKGh0dHBzOi8vZG9jcy5ucG1qcy5jb20vZmlsZXMvcGFja2FnZS5qc29uKQogICAgcmJlbnYgICAgICAgICAgICAgICAgICAgIyBydWJ5IHZlcnNpb24gZnJvbSByYmVudiAoaHR0cHM6Ly9naXRodWIuY29tL3JiZW52L3JiZW52KQogICAgcnZtICAgICAgICAgICAgICAgICAgICAgIyBydWJ5IHZlcnNpb24gZnJvbSBydm0gKGh0dHBzOi8vcnZtLmlvKQogICAgZnZtICAgICAgICAgICAgICAgICAgICAgIyBmbHV0dGVyIHZlcnNpb24gbWFuYWdlbWVudCAoaHR0cHM6Ly9naXRodWIuY29tL2xlb2FmYXJpYXMvZnZtKQogICAgbHVhZW52ICAgICAgICAgICAgICAgICAgIyBsdWEgdmVyc2lvbiBmcm9tIGx1YWVudiAoaHR0cHM6Ly9naXRodWIuY29tL2NlaG9mZm1hbi9sdWFlbnYpCiAgICBqZW52ICAgICAgICAgICAgICAgICAgICAjIGphdmEgdmVyc2lvbiBmcm9tIGplbnYgKGh0dHBzOi8vZ2l0aHViLmNvbS9qZW52L2plbnYpCiAgICBwbGVudiAgICAgICAgICAgICAgICAgICAjIHBlcmwgdmVyc2lvbiBmcm9tIHBsZW52IChodHRwczovL2dpdGh1Yi5jb20vdG9rdWhpcm9tL3BsZW52KQogICAgcGhwZW52ICAgICAgICAgICAgICAgICAgIyBwaHAgdmVyc2lvbiBmcm9tIHBocGVudiAoaHR0cHM6Ly9naXRodWIuY29tL3BocGVudi9waHBlbnYpCiAgICBzY2FsYWVudiAgICAgICAgICAgICAgICAjIHNjYWxhIHZlcnNpb24gZnJvbSBzY2FsYWVudiAoaHR0cHM6Ly9naXRodWIuY29tL3NjYWxhZW52L3NjYWxhZW52KQogICAgaGFza2VsbF9zdGFjayAgICAgICAgICAgIyBoYXNrZWxsIHZlcnNpb24gZnJvbSBzdGFjayAoaHR0cHM6Ly9oYXNrZWxsc3RhY2sub3JnLykKICAgIGt1YmVjb250ZXh0ICAgICAgICAgICAgICMgY3VycmVudCBrdWJlcm5ldGVzIGNvbnRleHQgKGh0dHBzOi8va3ViZXJuZXRlcy5pby8pCiAgICB0ZXJyYWZvcm0gICAgICAgICAgICAgICAjIHRlcnJhZm9ybSB3b3Jrc3BhY2UgKGh0dHBzOi8vd3d3LnRlcnJhZm9ybS5pbykKICAgIGF3cyAgICAgICAgICAgICAgICAgICAgICMgYXdzIHByb2ZpbGUgKGh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9jbGkvbGF0ZXN0L3VzZXJndWlkZS9jbGktY29uZmlndXJlLXByb2ZpbGVzLmh0bWwpCiAgICBhd3NfZWJfZW52ICAgICAgICAgICAgICAjIGF3cyBlbGFzdGljIGJlYW5zdGFsayBlbnZpcm9ubWVudCAoaHR0cHM6Ly9hd3MuYW1hem9uLmNvbS9lbGFzdGljYmVhbnN0YWxrLykKICAgIGF6dXJlICAgICAgICAgICAgICAgICAgICMgYXp1cmUgYWNjb3VudCBuYW1lIChodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9lbi11cy9jbGkvYXp1cmUpCiAgICBnY2xvdWQgICAgICAgICAgICAgICAgICAjIGdvb2dsZSBjbG91ZCBjbGkgYWNjb3VudCBhbmQgcHJvamVjdCAoaHR0cHM6Ly9jbG91ZC5nb29nbGUuY29tLykKICAgIGdvb2dsZV9hcHBfY3JlZCAgICAgICAgICMgZ29vZ2xlIGFwcGxpY2F0aW9uIGNyZWRlbnRpYWxzIChodHRwczovL2Nsb3VkLmdvb2dsZS5jb20vZG9jcy9hdXRoZW50aWNhdGlvbi9wcm9kdWN0aW9uKQogICAgY29udGV4dCAgICAgICAgICAgICAgICAgIyB1c2VyQGhvc3RuYW1lCiAgICBub3JkdnBuICAgICAgICAgICAgICAgICAjIG5vcmR2cG4gY29ubmVjdGlvbiBzdGF0dXMsIGxpbnV4IG9ubHkgKGh0dHBzOi8vbm9yZHZwbi5jb20vKQogICAgcmFuZ2VyICAgICAgICAgICAgICAgICAgIyByYW5nZXIgc2hlbGwgKGh0dHBzOi8vZ2l0aHViLmNvbS9yYW5nZXIvcmFuZ2VyKQogICAgbm5uICAgICAgICAgICAgICAgICAgICAgIyBubm4gc2hlbGwgKGh0dHBzOi8vZ2l0aHViLmNvbS9qYXJ1bi9ubm4pCiAgICB2aW1fc2hlbGwgICAgICAgICAgICAgICAjIHZpbSBzaGVsbCBpbmRpY2F0b3IgKDpzaCkKICAgIG1pZG5pZ2h0X2NvbW1hbmRlciAgICAgICMgbWlkbmlnaHQgY29tbWFuZGVyIHNoZWxsIChodHRwczovL21pZG5pZ2h0LWNvbW1hbmRlci5vcmcvKQogICAgbml4X3NoZWxsICAgICAgICAgICAgICAgIyBuaXggc2hlbGwgKGh0dHBzOi8vbml4b3Mub3JnL25peG9zL25peC1waWxscy9kZXZlbG9waW5nLXdpdGgtbml4LXNoZWxsLmh0bWwpCiAgICAjIHZpX21vZGUgICAgICAgICAgICAgICAjIHZpIG1vZGUgKHlvdSBkb24ndCBuZWVkIHRoaXMgaWYgeW91J3ZlIGVuYWJsZWQgcHJvbXB0X2NoYXIpCiAgICAjIHZwbl9pcCAgICAgICAgICAgICAgICAjIHZpcnR1YWwgcHJpdmF0ZSBuZXR3b3JrIGluZGljYXRvcgogICAgIyBsb2FkICAgICAgICAgICAgICAgICAgIyBDUFUgbG9hZAogICAgIyBkaXNrX3VzYWdlICAgICAgICAgICAgIyBkaXNrIHVzYWdlCiAgICAjIHJhbSAgICAgICAgICAgICAgICAgICAjIGZyZWUgUkFNCiAgICAjIHN3YXAgICAgICAgICAgICAgICAgICAjIHVzZWQgc3dhcAogICAgdG9kbyAgICAgICAgICAgICAgICAgICAgIyB0b2RvIGl0ZW1zIChodHRwczovL2dpdGh1Yi5jb20vdG9kb3R4dC90b2RvLnR4dC1jbGkpCiAgICB0aW1ld2FycmlvciAgICAgICAgICAgICAjIHRpbWV3YXJyaW9yIHRyYWNraW5nIHN0YXR1cyAoaHR0cHM6Ly90aW1ld2Fycmlvci5uZXQvKQogICAgdGFza3dhcnJpb3IgICAgICAgICAgICAgIyB0YXNrd2FycmlvciB0YXNrIGNvdW50IChodHRwczovL3Rhc2t3YXJyaW9yLm9yZy8pCiAgICB0aW1lICAgICAgICAgICAgICAgICAgICAjIGN1cnJlbnQgdGltZQogICAgIyA9PT09PT09PT09PT09PT09PT09PT09PT09WyBMaW5lICMyIF09PT09PT09PT09PT09PT09PT09PT09PT09CiAgICBuZXdsaW5lICAgICAgICAgICAgICAgICAjIFxuCiAgICAjIGlwICAgICAgICAgICAgICAgICAgICAjIGlwIGFkZHJlc3MgYW5kIGJhbmR3aWR0aCB1c2FnZSBmb3IgYSBzcGVjaWZpZWQgbmV0d29yayBpbnRlcmZhY2UKICAgICMgcHVibGljX2lwICAgICAgICAgICAgICMgcHVibGljIElQIGFkZHJlc3MKICAgICMgcHJveHkgICAgICAgICAgICAgICAgICMgc3lzdGVtLXdpZGUgaHR0cC9odHRwcy9mdHAgcHJveHkKICAgICMgYmF0dGVyeSAgICAgICAgICAgICAgICMgaW50ZXJuYWwgYmF0dGVyeQogICAgIyB3aWZpICAgICAgICAgICAgICAgICAgIyB3aWZpIHNwZWVkCiAgICAjIGV4YW1wbGUgICAgICAgICAgICAgICAjIGV4YW1wbGUgdXNlci1kZWZpbmVkIHNlZ21lbnQgKHNlZSBwcm9tcHRfZXhhbXBsZSBmdW5jdGlvbiBiZWxvdykKICApCgogICMgRGVmaW5lcyBjaGFyYWN0ZXIgc2V0IHVzZWQgYnkgcG93ZXJsZXZlbDEway4gSXQncyBiZXN0IHRvIGxldCBgcDEwayBjb25maWd1cmVgIHNldCBpdCBmb3IgeW91LgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX01PREU9bmVyZGZvbnQtY29tcGxldGUKICAjIFdoZW4gc2V0IHRvIGBtb2RlcmF0ZWAsIHNvbWUgaWNvbnMgd2lsbCBoYXZlIGFuIGV4dHJhIHNwYWNlIGFmdGVyIHRoZW0uIFRoaXMgaXMgbWVhbnQgdG8gYXZvaWQKICAjIGljb24gb3ZlcmxhcCB3aGVuIHVzaW5nIG5vbi1tb25vc3BhY2UgZm9udHMuIFdoZW4gc2V0IHRvIGBub25lYCwgc3BhY2VzIGFyZSBub3QgYWRkZWQuCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfSUNPTl9QQURESU5HPW5vbmUKCiAgIyBXaGVuIHNldCB0byB0cnVlLCBpY29ucyBhcHBlYXIgYmVmb3JlIGNvbnRlbnQgb24gYm90aCBzaWRlcyBvZiB0aGUgcHJvbXB0LiBXaGVuIHNldAogICMgdG8gZmFsc2UsIGljb25zIGdvIGFmdGVyIGNvbnRlbnQuIElmIGVtcHR5IG9yIG5vdCBzZXQsIGljb25zIGdvIGJlZm9yZSBjb250ZW50IGluIHRoZSBsZWZ0CiAgIyBwcm9tcHQgYW5kIGFmdGVyIGNvbnRlbnQgaW4gdGhlIHJpZ2h0IHByb21wdC4KICAjCiAgIyBZb3UgY2FuIGFsc28gb3ZlcnJpZGUgaXQgZm9yIGEgc3BlY2lmaWMgc2VnbWVudDoKICAjCiAgIyAgIFBPV0VSTEVWRUw5S19TVEFUVVNfSUNPTl9CRUZPUkVfQ09OVEVOVD1mYWxzZQogICMKICAjIE9yIGZvciBhIHNwZWNpZmljIHNlZ21lbnQgaW4gc3BlY2lmaWMgc3RhdGU6CiAgIwogICMgICBQT1dFUkxFVkVMOUtfRElSX05PVF9XUklUQUJMRV9JQ09OX0JFRk9SRV9DT05URU5UPWZhbHNlCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfSUNPTl9CRUZPUkVfQ09OVEVOVD0KCiAgIyBBZGQgYW4gZW1wdHkgbGluZSBiZWZvcmUgZWFjaCBwcm9tcHQuCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfUFJPTVBUX0FERF9ORVdMSU5FPXRydWUKCiAgIyBDb25uZWN0IGxlZnQgcHJvbXB0IGxpbmVzIHdpdGggdGhlc2Ugc3ltYm9scy4gWW91J2xsIHByb2JhYmx5IHdhbnQgdG8gdXNlIHRoZSBzYW1lIGNvbG9yCiAgIyBhcyBQT1dFUkxFVkVMOUtfTVVMVElMSU5FX0ZJUlNUX1BST01QVF9HQVBfRk9SRUdST1VORCBiZWxvdy4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19NVUxUSUxJTkVfRklSU1RfUFJPTVBUX1BSRUZJWD0KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19NVUxUSUxJTkVfTkVXTElORV9QUk9NUFRfUFJFRklYPQogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX01VTFRJTElORV9MQVNUX1BST01QVF9QUkVGSVg9CiAgIyBDb25uZWN0IHJpZ2h0IHByb21wdCBsaW5lcyB3aXRoIHRoZXNlIHN5bWJvbHMuCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfTVVMVElMSU5FX0ZJUlNUX1BST01QVF9TVUZGSVg9CiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfTVVMVElMSU5FX05FV0xJTkVfUFJPTVBUX1NVRkZJWD0KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19NVUxUSUxJTkVfTEFTVF9QUk9NUFRfU1VGRklYPQoKICAjIEZpbGxlciBiZXR3ZWVuIGxlZnQgYW5kIHJpZ2h0IHByb21wdCBvbiB0aGUgZmlyc3QgcHJvbXB0IGxpbmUuIFlvdSBjYW4gc2V0IGl0IHRvICcgJywgJ8K3JyBvcgogICMgJ+KUgCcuIFRoZSBsYXN0IHR3byBtYWtlIGl0IGVhc2llciB0byBzZWUgdGhlIGFsaWdubWVudCBiZXR3ZWVuIGxlZnQgYW5kIHJpZ2h0IHByb21wdCBhbmQgdG8KICAjIHNlcGFyYXRlIHByb21wdCBmcm9tIGNvbW1hbmQgb3V0cHV0LiBZb3UgbWlnaHQgd2FudCB0byBzZXQgUE9XRVJMRVZFTDlLX1BST01QVF9BRERfTkVXTElORT1mYWxzZQogICMgZm9yIG1vcmUgY29tcGFjdCBwcm9tcHQgaWYgdXNpbmcgdXNpbmcgdGhpcyBvcHRpb24uCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfTVVMVElMSU5FX0ZJUlNUX1BST01QVF9HQVBfQ0hBUj0nICcKICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19NVUxUSUxJTkVfRklSU1RfUFJPTVBUX0dBUF9CQUNLR1JPVU5EPQogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX01VTFRJTElORV9ORVdMSU5FX1BST01QVF9HQVBfQkFDS0dST1VORD0KICBpZiBbWyAkUE9XRVJMRVZFTDlLX01VTFRJTElORV9GSVJTVF9QUk9NUFRfR0FQX0NIQVIgIT0gJyAnIF1dOyB0aGVuCiAgICAjIFRoZSBjb2xvciBvZiB0aGUgZmlsbGVyLiBZb3UnbGwgcHJvYmFibHkgd2FudCB0byBtYXRjaCB0aGUgY29sb3Igb2YgUE9XRVJMRVZFTDlLX01VTFRJTElORQogICAgIyBvcm5hbWVudHMgZGVmaW5lZCBhYm92ZS4KICAgIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX01VTFRJTElORV9GSVJTVF9QUk9NUFRfR0FQX0ZPUkVHUk9VTkQ9MjQyCiAgICAjIFN0YXJ0IGZpbGxlciBmcm9tIHRoZSBlZGdlIG9mIHRoZSBzY3JlZW4gaWYgdGhlcmUgYXJlIG5vIGxlZnQgc2VnbWVudHMgb24gdGhlIGZpcnN0IGxpbmUuCiAgICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19FTVBUWV9MSU5FX0xFRlRfUFJPTVBUX0ZJUlNUX1NFR01FTlRfRU5EX1NZTUJPTD0nJXslfScKICAgICMgRW5kIGZpbGxlciBvbiB0aGUgZWRnZSBvZiB0aGUgc2NyZWVuIGlmIHRoZXJlIGFyZSBubyByaWdodCBzZWdtZW50cyBvbiB0aGUgZmlyc3QgbGluZS4KICAgIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0VNUFRZX0xJTkVfUklHSFRfUFJPTVBUX0ZJUlNUX1NFR01FTlRfU1RBUlRfU1lNQk9MPScleyV9JwogIGZpCgogICMgRGVmYXVsdCBiYWNrZ3JvdW5kIGNvbG9yLgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0JBQ0tHUk9VTkQ9MjM4CgogICMgU2VwYXJhdG9yIGJldHdlZW4gc2FtZS1jb2xvciBzZWdtZW50cyBvbiB0aGUgbGVmdC4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19MRUZUX1NVQlNFR01FTlRfU0VQQVJBVE9SPSclMjQ2Rlx1RTBCMScKICAjIFNlcGFyYXRvciBiZXR3ZWVuIHNhbWUtY29sb3Igc2VnbWVudHMgb24gdGhlIHJpZ2h0LgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX1JJR0hUX1NVQlNFR01FTlRfU0VQQVJBVE9SPSclMjQ2Rlx1RTBCMycKICAjIFNlcGFyYXRvciBiZXR3ZWVuIGRpZmZlcmVudC1jb2xvciBzZWdtZW50cyBvbiB0aGUgbGVmdC4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19MRUZUX1NFR01FTlRfU0VQQVJBVE9SPSdcdUUwQjAnCiAgIyBTZXBhcmF0b3IgYmV0d2VlbiBkaWZmZXJlbnQtY29sb3Igc2VnbWVudHMgb24gdGhlIHJpZ2h0LgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX1JJR0hUX1NFR01FTlRfU0VQQVJBVE9SPSdcdUUwQjInCiAgIyBUaGUgcmlnaHQgZW5kIG9mIGxlZnQgcHJvbXB0LgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0xFRlRfUFJPTVBUX0xBU1RfU0VHTUVOVF9FTkRfU1lNQk9MPSdcdUUwQjAnCiAgIyBUaGUgbGVmdCBlbmQgb2YgcmlnaHQgcHJvbXB0LgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX1JJR0hUX1BST01QVF9GSVJTVF9TRUdNRU5UX1NUQVJUX1NZTUJPTD0nXHVFMEIyJwogICMgVGhlIGxlZnQgZW5kIG9mIGxlZnQgcHJvbXB0LgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0xFRlRfUFJPTVBUX0ZJUlNUX1NFR01FTlRfU1RBUlRfU1lNQk9MPScnCiAgIyBUaGUgcmlnaHQgZW5kIG9mIHJpZ2h0IHByb21wdC4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19SSUdIVF9QUk9NUFRfTEFTVF9TRUdNRU5UX0VORF9TWU1CT0w9JycKICAjIExlZnQgcHJvbXB0IHRlcm1pbmF0b3IgZm9yIGxpbmVzIHdpdGhvdXQgYW55IHNlZ21lbnRzLgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0VNUFRZX0xJTkVfTEVGVF9QUk9NUFRfTEFTVF9TRUdNRU5UX0VORF9TWU1CT0w9CgogICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1sgb3NfaWNvbjogb3MgaWRlbnRpZmllciBdIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICMgT1MgaWRlbnRpZmllciBjb2xvci4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19PU19JQ09OX0ZPUkVHUk9VTkQ9MjU1CiAgIyBDdXN0b20gaWNvbi4KICAjIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX09TX0lDT05fQ09OVEVOVF9FWFBBTlNJT049J+KtkCcKCiAgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNbIHByb21wdF9jaGFyOiBwcm9tcHQgc3ltYm9sIF0jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICMgVHJhbnNwYXJlbnQgYmFja2dyb3VuZC4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19QUk9NUFRfQ0hBUl9CQUNLR1JPVU5EPQogICMgR3JlZW4gcHJvbXB0IHN5bWJvbCBpZiB0aGUgbGFzdCBjb21tYW5kIHN1Y2NlZWRlZC4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19QUk9NUFRfQ0hBUl9PS197VklJTlMsVklDTUQsVklWSVMsVklPV1J9X0ZPUkVHUk9VTkQ9NzYKICAjIFJlZCBwcm9tcHQgc3ltYm9sIGlmIHRoZSBsYXN0IGNvbW1hbmQgZmFpbGVkLgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX1BST01QVF9DSEFSX0VSUk9SX3tWSUlOUyxWSUNNRCxWSVZJUyxWSU9XUn1fRk9SRUdST1VORD0xOTYKICAjIERlZmF1bHQgcHJvbXB0IHN5bWJvbC4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19QUk9NUFRfQ0hBUl97T0ssRVJST1J9X1ZJSU5TX0NPTlRFTlRfRVhQQU5TSU9OPSfina8nCiAgIyBQcm9tcHQgc3ltYm9sIGluIGNvbW1hbmQgdmkgbW9kZS4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19QUk9NUFRfQ0hBUl97T0ssRVJST1J9X1ZJQ01EX0NPTlRFTlRfRVhQQU5TSU9OPSfina4nCiAgIyBQcm9tcHQgc3ltYm9sIGluIHZpc3VhbCB2aSBtb2RlLgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX1BST01QVF9DSEFSX3tPSyxFUlJPUn1fVklWSVNfQ09OVEVOVF9FWFBBTlNJT049J1YnCiAgIyBQcm9tcHQgc3ltYm9sIGluIG92ZXJ3cml0ZSB2aSBtb2RlLgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX1BST01QVF9DSEFSX3tPSyxFUlJPUn1fVklPV1JfQ09OVEVOVF9FWFBBTlNJT049J+KWticKICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19QUk9NUFRfQ0hBUl9PVkVSV1JJVEVfU1RBVEU9dHJ1ZQogICMgTm8gbGluZSB0ZXJtaW5hdG9yIGlmIHByb21wdF9jaGFyIGlzIHRoZSBsYXN0IHNlZ21lbnQuCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfUFJPTVBUX0NIQVJfTEVGVF9QUk9NUFRfTEFTVF9TRUdNRU5UX0VORF9TWU1CT0w9CiAgIyBObyBsaW5lIGludHJvZHVjZXIgaWYgcHJvbXB0X2NoYXIgaXMgdGhlIGZpcnN0IHNlZ21lbnQuCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfUFJPTVBUX0NIQVJfTEVGVF9QUk9NUFRfRklSU1RfU0VHTUVOVF9TVEFSVF9TWU1CT0w9CiAgIyBObyBzdXJyb3VuZGluZyB3aGl0ZXNwYWNlLgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX1BST01QVF9DSEFSX0xFRlRfe0xFRlQsUklHSFR9X1dISVRFU1BBQ0U9CgogICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNbIGRpcjogY3VycmVudCBkaXJlY3RvcnkgXSMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAjIERlZmF1bHQgY3VycmVudCBkaXJlY3RvcnkgY29sb3IuCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfRElSX0ZPUkVHUk9VTkQ9MzEKICAjIElmIGRpcmVjdG9yeSBpcyB0b28gbG9uZywgc2hvcnRlbiBzb21lIG9mIGl0cyBzZWdtZW50cyB0byB0aGUgc2hvcnRlc3QgcG9zc2libGUgdW5pcXVlCiAgIyBwcmVmaXguIFRoZSBzaG9ydGVuZWQgZGlyZWN0b3J5IGNhbiBiZSB0YWItY29tcGxldGVkIHRvIHRoZSBvcmlnaW5hbC4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19TSE9SVEVOX1NUUkFURUdZPXRydW5jYXRlX3RvX3VuaXF1ZQogICMgUmVwbGFjZSByZW1vdmVkIHNlZ21lbnQgc3VmZml4ZXMgd2l0aCB0aGlzIHN5bWJvbC4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19TSE9SVEVOX0RFTElNSVRFUj0KICAjIENvbG9yIG9mIHRoZSBzaG9ydGVuZWQgZGlyZWN0b3J5IHNlZ21lbnRzLgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0RJUl9TSE9SVEVORURfRk9SRUdST1VORD0xMDMKICAjIENvbG9yIG9mIHRoZSBhbmNob3IgZGlyZWN0b3J5IHNlZ21lbnRzLiBBbmNob3Igc2VnbWVudHMgYXJlIG5ldmVyIHNob3J0ZW5lZC4gVGhlIGZpcnN0CiAgIyBzZWdtZW50IGlzIGFsd2F5cyBhbiBhbmNob3IuCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfRElSX0FOQ0hPUl9GT1JFR1JPVU5EPTM5CiAgIyBEaXNwbGF5IGFuY2hvciBkaXJlY3Rvcnkgc2VnbWVudHMgaW4gYm9sZC4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19ESVJfQU5DSE9SX0JPTEQ9dHJ1ZQogICMgRG9uJ3Qgc2hvcnRlbiBkaXJlY3RvcmllcyB0aGF0IGNvbnRhaW4gYW55IG9mIHRoZXNlIGZpbGVzLiBUaGV5IGFyZSBhbmNob3JzLgogIGxvY2FsIGFuY2hvcl9maWxlcz0oCiAgICAuYnpyCiAgICAuY2l0YwogICAgLmdpdAogICAgLmhnCiAgICAubm9kZS12ZXJzaW9uCiAgICAucHl0aG9uLXZlcnNpb24KICAgIC5nby12ZXJzaW9uCiAgICAucnVieS12ZXJzaW9uCiAgICAubHVhLXZlcnNpb24KICAgIC5qYXZhLXZlcnNpb24KICAgIC5wZXJsLXZlcnNpb24KICAgIC5waHAtdmVyc2lvbgogICAgLnRvb2wtdmVyc2lvbgogICAgLnNob3J0ZW5fZm9sZGVyX21hcmtlcgogICAgLnN2bgogICAgLnRlcnJhZm9ybQogICAgQ1ZTCiAgICBDYXJnby50b21sCiAgICBjb21wb3Nlci5qc29uCiAgICBnby5tb2QKICAgIHBhY2thZ2UuanNvbgogICAgc3RhY2sueWFtbAogICkKICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19TSE9SVEVOX0ZPTERFUl9NQVJLRVI9IigkeyhqOnw6KWFuY2hvcl9maWxlc30pIgogICMgSWYgc2V0IHRvICJmaXJzdCIgKCJsYXN0IiksIHJlbW92ZSBldmVyeXRoaW5nIGJlZm9yZSB0aGUgZmlyc3QgKGxhc3QpIHN1YmRpcmVjdG9yeSB0aGF0IGNvbnRhaW5zCiAgIyBmaWxlcyBtYXRjaGluZyAkUE9XRVJMRVZFTDlLX1NIT1JURU5fRk9MREVSX01BUktFUi4gRm9yIGV4YW1wbGUsIHdoZW4gdGhlIGN1cnJlbnQgZGlyZWN0b3J5IGlzCiAgIyAvZm9vL2Jhci9naXRfcmVwby9uZXN0ZWRfZ2l0X3JlcG8vYmF6LCBwcm9tcHQgd2lsbCBkaXNwbGF5IGdpdF9yZXBvL25lc3RlZF9naXRfcmVwby9iYXogKGZpcnN0KQogICMgb3IgbmVzdGVkX2dpdF9yZXBvL2JheiAobGFzdCkuIFRoaXMgYXNzdW1lcyB0aGF0IGdpdF9yZXBvIGFuZCBuZXN0ZWRfZ2l0X3JlcG8gY29udGFpbiBtYXJrZXJzCiAgIyBhbmQgb3RoZXIgZGlyZWN0b3JpZXMgZG9uJ3QuCiAgIwogICMgT3B0aW9uYWxseSwgImZpcnN0IiBhbmQgImxhc3QiIGNhbiBiZSBmb2xsb3dlZCBieSAiOjxvZmZzZXQ+IiB3aGVyZSA8b2Zmc2V0PiBpcyBhbiBpbnRlZ2VyLgogICMgVGhpcyBtb3ZlcyB0aGUgdHJ1bmNhdGlvbiBwb2ludCB0byB0aGUgcmlnaHQgKHBvc2l0aXZlIG9mZnNldCkgb3IgdG8gdGhlIGxlZnQgKG5lZ2F0aXZlIG9mZnNldCkKICAjIHJlbGF0aXZlIHRvIHRoZSBtYXJrZXIuIFBsYWluICJmaXJzdCIgYW5kICJsYXN0IiBhcmUgZXF1aXZhbGVudCB0byAiZmlyc3Q6MCIgYW5kICJsYXN0OjAiCiAgIyByZXNwZWN0aXZlbHkuCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfRElSX1RSVU5DQVRFX0JFRk9SRV9NQVJLRVI9ZmFsc2UKICAjIERvbid0IHNob3J0ZW4gdGhpcyBtYW55IGxhc3QgZGlyZWN0b3J5IHNlZ21lbnRzLiBUaGV5IGFyZSBhbmNob3JzLgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX1NIT1JURU5fRElSX0xFTkdUSD0xCiAgIyBTaG9ydGVuIGRpcmVjdG9yeSBpZiBpdCdzIGxvbmdlciB0aGFuIHRoaXMgZXZlbiBpZiB0aGVyZSBpcyBzcGFjZSBmb3IgaXQuIFRoZSB2YWx1ZSBjYW4KICAjIGJlIGVpdGhlciBhYnNvbHV0ZSAoZS5nLiwgJzgwJykgb3IgYSBwZXJjZW50YWdlIG9mIHRlcm1pbmFsIHdpZHRoIChlLmcsICc1MCUnKS4gSWYgZW1wdHksCiAgIyBkaXJlY3Rvcnkgd2lsbCBiZSBzaG9ydGVuZWQgb25seSB3aGVuIHByb21wdCBkb2Vzbid0IGZpdCBvciB3aGVuIG90aGVyIHBhcmFtZXRlcnMgZGVtYW5kIGl0CiAgIyAoc2VlIFBPV0VSTEVWRUw5S19ESVJfTUlOX0NPTU1BTkRfQ09MVU1OUyBhbmQgUE9XRVJMRVZFTDlLX0RJUl9NSU5fQ09NTUFORF9DT0xVTU5TX1BDVCBiZWxvdykuCiAgIyBJZiBzZXQgdG8gYDBgLCBkaXJlY3Rvcnkgd2lsbCBhbHdheXMgYmUgc2hvcnRlbmVkIHRvIGl0cyBtaW5pbXVtIGxlbmd0aC4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19ESVJfTUFYX0xFTkdUSD04MAogICMgV2hlbiBgZGlyYCBzZWdtZW50IGlzIG9uIHRoZSBsYXN0IHByb21wdCBsaW5lLCB0cnkgdG8gc2hvcnRlbiBpdCBlbm91Z2ggdG8gbGVhdmUgYXQgbGVhc3QgdGhpcwogICMgbWFueSBjb2x1bW5zIGZvciB0eXBpbmcgY29tbWFuZHMuCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfRElSX01JTl9DT01NQU5EX0NPTFVNTlM9NDAKICAjIFdoZW4gYGRpcmAgc2VnbWVudCBpcyBvbiB0aGUgbGFzdCBwcm9tcHQgbGluZSwgdHJ5IHRvIHNob3J0ZW4gaXQgZW5vdWdoIHRvIGxlYXZlIGF0IGxlYXN0CiAgIyBDT0xVTU5TICogUE9XRVJMRVZFTDlLX0RJUl9NSU5fQ09NTUFORF9DT0xVTU5TX1BDVCAqIDAuMDEgY29sdW1ucyBmb3IgdHlwaW5nIGNvbW1hbmRzLgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0RJUl9NSU5fQ09NTUFORF9DT0xVTU5TX1BDVD01MAogICMgSWYgc2V0IHRvIHRydWUsIGVtYmVkIGEgaHlwZXJsaW5rIGludG8gdGhlIGRpcmVjdG9yeS4gVXNlZnVsIGZvciBxdWlja2x5CiAgIyBvcGVuaW5nIGEgZGlyZWN0b3J5IGluIHRoZSBmaWxlIG1hbmFnZXIgc2ltcGx5IGJ5IGNsaWNraW5nIHRoZSBsaW5rLgogICMgQ2FuIGFsc28gYmUgaGFuZHkgd2hlbiB0aGUgZGlyZWN0b3J5IGlzIHNob3J0ZW5lZCwgYXMgaXQgYWxsb3dzIHlvdSB0byBzZWUKICAjIHRoZSBmdWxsIGRpcmVjdG9yeSB0aGF0IHdhcyB1c2VkIGluIHByZXZpb3VzIGNvbW1hbmRzLgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0RJUl9IWVBFUkxJTks9ZmFsc2UKCiAgIyBFbmFibGUgc3BlY2lhbCBzdHlsaW5nIGZvciBub24td3JpdGFibGUgYW5kIG5vbi1leGlzdGVudCBkaXJlY3Rvcmllcy4gU2VlIFBPV0VSTEVWRUw5S19MT0NLX0lDT04KICAjIGFuZCBQT1dFUkxFVkVMOUtfRElSX0NMQVNTRVMgYmVsb3cuCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfRElSX1NIT1dfV1JJVEFCTEU9djMKCiAgIyBUaGUgZGVmYXVsdCBpY29uIHNob3duIG5leHQgdG8gbm9uLXdyaXRhYmxlIGFuZCBub24tZXhpc3RlbnQgZGlyZWN0b3JpZXMgd2hlbgogICMgUE9XRVJMRVZFTDlLX0RJUl9TSE9XX1dSSVRBQkxFIGlzIHNldCB0byB2My4KICAjIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0xPQ0tfSUNPTj0n4q2QJwoKICAjIFBPV0VSTEVWRUw5S19ESVJfQ0xBU1NFUyBhbGxvd3MgeW91IHRvIHNwZWNpZnkgY3VzdG9tIGljb25zIGFuZCBjb2xvcnMgZm9yIGRpZmZlcmVudAogICMgZGlyZWN0b3JpZXMuIEl0IG11c3QgYmUgYW4gYXJyYXkgd2l0aCAzICogTiBlbGVtZW50cy4gRWFjaCB0cmlwbGV0IGNvbnNpc3RzIG9mOgogICMKICAjICAgMS4gQSBwYXR0ZXJuIGFnYWluc3Qgd2hpY2ggdGhlIGN1cnJlbnQgZGlyZWN0b3J5ICgkUFdEKSBpcyBtYXRjaGVkLiBNYXRjaGluZyBpcyBkb25lIHdpdGgKICAjICAgICAgZXh0ZW5kZWRfZ2xvYiBvcHRpb24gZW5hYmxlZC4KICAjICAgMi4gRGlyZWN0b3J5IGNsYXNzIGZvciB0aGUgcHVycG9zZSBvZiBzdHlsaW5nLgogICMgICAzLiBBbiBlbXB0eSBzdHJpbmcuCiAgIwogICMgVHJpcGxldHMgYXJlIHRyaWVkIGluIG9yZGVyLiBUaGUgZmlyc3QgdHJpcGxldCB3aG9zZSBwYXR0ZXJuIG1hdGNoZXMgJFBXRCB3aW5zLgogICMKICAjIElmIFBPV0VSTEVWRUw5S19ESVJfU0hPV19XUklUQUJMRSBpcyBzZXQgdG8gdjMsIG5vbi13cml0YWJsZSBhbmQgbm9uLWV4aXN0ZW50IGRpcmVjdG9yaWVzCiAgIyBhY3F1aXJlIGNsYXNzIHN1ZmZpeCBfTk9UX1dSSVRBQkxFIGFuZCBOT05fRVhJU1RFTlQgcmVzcGVjdGl2ZWx5LgogICMKICAjIEZvciBleGFtcGxlLCBnaXZlbiB0aGVzZSBzZXR0aW5nczoKICAjCiAgIyAgIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0RJUl9DTEFTU0VTPSgKICAjICAgICAnfi93b3JrKHwvKiknICBXT1JLICAgICAnJwogICMgICAgICd+KHwvKiknICAgICAgIEhPTUUgICAgICcnCiAgIyAgICAgJyonICAgICAgICAgICAgREVGQVVMVCAgJycpCiAgIwogICMgV2hlbmV2ZXIgdGhlIGN1cnJlbnQgZGlyZWN0b3J5IGlzIH4vd29yayBvciBhIHN1YmRpcmVjdG9yeSBvZiB+L3dvcmssIGl0IGdldHMgc3R5bGVkIHdpdGggb25lCiAgIyBvZiB0aGUgZm9sbG93aW5nIGNsYXNzZXMgZGVwZW5kaW5nIG9uIGl0cyB3cml0YWJpbGl0eSBhbmQgZXhpc3RlbmNlOiBXT1JLLCBXT1JLX05PVF9XUklUQUJMRSBvcgogICMgV09SS19OT05fRVhJU1RFTlQuCiAgIwogICMgU2ltcGx5IGFzc2lnbmluZyBjbGFzc2VzIHRvIGRpcmVjdG9yaWVzIGRvZXNuJ3QgaGF2ZSBhbnkgdmlzaWJsZSBlZmZlY3RzLiBJdCBtZXJlbHkgZ2l2ZXMgeW91IGFuCiAgIyBvcHRpb24gdG8gZGVmaW5lIGN1c3RvbSBjb2xvcnMgYW5kIGljb25zIGZvciBkaWZmZXJlbnQgZGlyZWN0b3J5IGNsYXNzZXMuCiAgIwogICMgICAjIFN0eWxpbmcgZm9yIFdPUksuCiAgIyAgIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0RJUl9XT1JLX1ZJU1VBTF9JREVOVElGSUVSX0VYUEFOU0lPTj0n4q2QJwogICMgICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19ESVJfV09SS19GT1JFR1JPVU5EPTMxCiAgIyAgIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0RJUl9XT1JLX1NIT1JURU5FRF9GT1JFR1JPVU5EPTEwMwogICMgICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19ESVJfV09SS19BTkNIT1JfRk9SRUdST1VORD0zOQogICMKICAjICAgIyBTdHlsaW5nIGZvciBXT1JLX05PVF9XUklUQUJMRS4KICAjICAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfRElSX1dPUktfTk9UX1dSSVRBQkxFX1ZJU1VBTF9JREVOVElGSUVSX0VYUEFOU0lPTj0n4q2QJwogICMgICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19ESVJfV09SS19OT1RfV1JJVEFCTEVfRk9SRUdST1VORD0zMQogICMgICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19ESVJfV09SS19OT1RfV1JJVEFCTEVfU0hPUlRFTkVEX0ZPUkVHUk9VTkQ9MTAzCiAgIyAgIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0RJUl9XT1JLX05PVF9XUklUQUJMRV9BTkNIT1JfRk9SRUdST1VORD0zOQogICMKICAjICAgIyBTdHlsaW5nIGZvciBXT1JLX05PTl9FWElTVEVOVC4KICAjICAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfRElSX1dPUktfTk9OX0VYSVNURU5UX1ZJU1VBTF9JREVOVElGSUVSX0VYUEFOU0lPTj0n4q2QJwogICMgICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19ESVJfV09SS19OT05fRVhJU1RFTlRfRk9SRUdST1VORD0zMQogICMgICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19ESVJfV09SS19OT05fRVhJU1RFTlRfU0hPUlRFTkVEX0ZPUkVHUk9VTkQ9MTAzCiAgIyAgIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0RJUl9XT1JLX05PTl9FWElTVEVOVF9BTkNIT1JfRk9SRUdST1VORD0zOQogICMKICAjIElmIGEgc3R5bGluZyBwYXJhbWV0ZXIgaXNuJ3QgZXhwbGljaXRseSBkZWZpbmVkIGZvciBzb21lIGNsYXNzLCBpdCBmYWxscyBiYWNrIHRvIHRoZSBjbGFzc2xlc3MKICAjIHBhcmFtZXRlci4gRm9yIGV4YW1wbGUsIGlmIFBPV0VSTEVWRUw5S19ESVJfV09SS19OT1RfV1JJVEFCTEVfRk9SRUdST1VORCBpcyBub3Qgc2V0LCBpdCBmYWxscwogICMgYmFjayB0byBQT1dFUkxFVkVMOUtfRElSX0ZPUkVHUk9VTkQuCiAgIwogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0RJUl9DTEFTU0VTPSgpCgogICMgQ3VzdG9tIHByZWZpeC4KICAjIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0RJUl9QUkVGSVg9JyUyNDhGaW4gJwoKICAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjWyB2Y3M6IGdpdCBzdGF0dXMgXSMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgIyBCcmFuY2ggaWNvbi4gU2V0IHRoaXMgcGFyYW1ldGVyIHRvICdcdUYxMjYgJyBmb3IgdGhlIHBvcHVsYXIgUG93ZXJsaW5lIGJyYW5jaCBpY29uLgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX1ZDU19CUkFOQ0hfSUNPTj0KCiAgIyBVbnRyYWNrZWQgZmlsZXMgaWNvbi4gSXQncyByZWFsbHkgYSBxdWVzdGlvbiBtYXJrLCB5b3VyIGZvbnQgaXNuJ3QgYnJva2VuLgogICMgQ2hhbmdlIHRoZSB2YWx1ZSBvZiB0aGlzIHBhcmFtZXRlciB0byBzaG93IGEgZGlmZmVyZW50IGljb24uCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfVkNTX1VOVFJBQ0tFRF9JQ09OPSc/JwoKICAjIEZvcm1hdHRlciBmb3IgR2l0IHN0YXR1cy4KICAjCiAgIyBFeGFtcGxlIG91dHB1dDogbWFzdGVyIOKHozQy4oehNDIgKjQyIG1lcmdlIH40MiArNDIgITQyID80Mi4KICAjCiAgIyBZb3UgY2FuIGVkaXQgdGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBob3cgR2l0IHN0YXR1cyBsb29rcy4KICAjCiAgIyBWQ1NfU1RBVFVTXyogcGFyYW1ldGVycyBhcmUgc2V0IGJ5IGdpdHN0YXR1cyBwbHVnaW4uIFNlZSByZWZlcmVuY2U6CiAgIyBodHRwczovL2dpdGh1Yi5jb20vcm9ta2F0di9naXRzdGF0dXMvYmxvYi9tYXN0ZXIvZ2l0c3RhdHVzLnBsdWdpbi56c2guCiAgZnVuY3Rpb24gbXlfZ2l0X2Zvcm1hdHRlcigpIHsKICAgIGVtdWxhdGUgLUwgenNoCgogICAgaWYgW1sgLW4gJFA5S19DT05URU5UIF1dOyB0aGVuCiAgICAgICMgSWYgUDlLX0NPTlRFTlQgaXMgbm90IGVtcHR5LCB1c2UgaXQuIEl0J3MgZWl0aGVyICJsb2FkaW5nIiBvciBmcm9tIHZjc19pbmZvIChub3QgZnJvbQogICAgICAjIGdpdHN0YXR1cyBwbHVnaW4pLiBWQ1NfU1RBVFVTXyogcGFyYW1ldGVycyBhcmUgbm90IGF2YWlsYWJsZSBpbiB0aGlzIGNhc2UuCiAgICAgIHR5cGVzZXQgLWcgbXlfZ2l0X2Zvcm1hdD0kUDlLX0NPTlRFTlQKICAgICAgcmV0dXJuCiAgICBmaQoKICAgIGlmICgoICQxICkpOyB0aGVuCiAgICAgICMgU3R5bGluZyBmb3IgdXAtdG8tZGF0ZSBHaXQgc3RhdHVzLgogICAgICBsb2NhbCAgICAgICBtZXRhPSclMjQ4RicgICMgZ3JleSBmb3JlZ3JvdW5kCiAgICAgIGxvY2FsICAgICAgY2xlYW49JyU3NkYnICAgIyBncmVlbiBmb3JlZ3JvdW5kCiAgICAgIGxvY2FsICAgbW9kaWZpZWQ9JyUxNzhGJyAgIyB5ZWxsb3cgZm9yZWdyb3VuZAogICAgICBsb2NhbCAgdW50cmFja2VkPSclMzlGJyAgICMgYmx1ZSBmb3JlZ3JvdW5kCiAgICAgIGxvY2FsIGNvbmZsaWN0ZWQ9JyUxOTZGJyAgIyByZWQgZm9yZWdyb3VuZAogICAgZWxzZQogICAgICAjIFN0eWxpbmcgZm9yIGluY29tcGxldGUgYW5kIHN0YWxlIEdpdCBzdGF0dXMuCiAgICAgIGxvY2FsICAgICAgIG1ldGE9JyUyNDRGJyAgIyBncmV5IGZvcmVncm91bmQKICAgICAgbG9jYWwgICAgICBjbGVhbj0nJTI0NEYnICAjIGdyZXkgZm9yZWdyb3VuZAogICAgICBsb2NhbCAgIG1vZGlmaWVkPSclMjQ0RicgICMgZ3JleSBmb3JlZ3JvdW5kCiAgICAgIGxvY2FsICB1bnRyYWNrZWQ9JyUyNDRGJyAgIyBncmV5IGZvcmVncm91bmQKICAgICAgbG9jYWwgY29uZmxpY3RlZD0nJTI0NEYnICAjIGdyZXkgZm9yZWdyb3VuZAogICAgZmkKCiAgICBsb2NhbCByZXMKCiAgICBpZiBbWyAtbiAkVkNTX1NUQVRVU19MT0NBTF9CUkFOQ0ggXV07IHRoZW4KICAgICAgbG9jYWwgYnJhbmNoPSR7KFYpVkNTX1NUQVRVU19MT0NBTF9CUkFOQ0h9CiAgICAgICMgSWYgbG9jYWwgYnJhbmNoIG5hbWUgaXMgYXQgbW9zdCAzMiBjaGFyYWN0ZXJzIGxvbmcsIHNob3cgaXQgaW4gZnVsbC4KICAgICAgIyBPdGhlcndpc2Ugc2hvdyB0aGUgZmlyc3QgMTIg4oCmIHRoZSBsYXN0IDEyLgogICAgICAjIFRpcDogVG8gYWx3YXlzIHNob3cgbG9jYWwgYnJhbmNoIG5hbWUgaW4gZnVsbCB3aXRob3V0IHRydW5jYXRpb24sIGRlbGV0ZSB0aGUgbmV4dCBsaW5lLgogICAgICAoKCAkI2JyYW5jaCA+IDMyICkpICYmIGJyYW5jaFsxMywtMTNdPSLigKYiICAjIDwtLSB0aGlzIGxpbmUKICAgICAgcmVzKz0iJHtjbGVhbn0keyhnOjopUE9XRVJMRVZFTDlLX1ZDU19CUkFOQ0hfSUNPTn0ke2JyYW5jaC8vXCUvJSV9IgogICAgZmkKCiAgICBpZiBbWyAtbiAkVkNTX1NUQVRVU19UQUcKICAgICAgICAgICMgU2hvdyB0YWcgb25seSBpZiBub3Qgb24gYSBicmFuY2guCiAgICAgICAgICAjIFRpcDogVG8gYWx3YXlzIHNob3cgdGFnLCBkZWxldGUgdGhlIG5leHQgbGluZS4KICAgICAgICAgICYmIC16ICRWQ1NfU1RBVFVTX0xPQ0FMX0JSQU5DSCAgIyA8LS0gdGhpcyBsaW5lCiAgICAgICAgXV07IHRoZW4KICAgICAgbG9jYWwgdGFnPSR7KFYpVkNTX1NUQVRVU19UQUd9CiAgICAgICMgSWYgdGFnIG5hbWUgaXMgYXQgbW9zdCAzMiBjaGFyYWN0ZXJzIGxvbmcsIHNob3cgaXQgaW4gZnVsbC4KICAgICAgIyBPdGhlcndpc2Ugc2hvdyB0aGUgZmlyc3QgMTIg4oCmIHRoZSBsYXN0IDEyLgogICAgICAjIFRpcDogVG8gYWx3YXlzIHNob3cgdGFnIG5hbWUgaW4gZnVsbCB3aXRob3V0IHRydW5jYXRpb24sIGRlbGV0ZSB0aGUgbmV4dCBsaW5lLgogICAgICAoKCAkI3RhZyA+IDMyICkpICYmIHRhZ1sxMywtMTNdPSLigKYiICAjIDwtLSB0aGlzIGxpbmUKICAgICAgcmVzKz0iJHttZXRhfSMke2NsZWFufSR7dGFnLy9cJS8lJX0iCiAgICBmaQoKICAgICMgRGlzcGxheSB0aGUgY3VycmVudCBHaXQgY29tbWl0IGlmIHRoZXJlIGlzIG5vIGJyYW5jaCBhbmQgbm8gdGFnLgogICAgIyBUaXA6IFRvIGFsd2F5cyBkaXNwbGF5IHRoZSBjdXJyZW50IEdpdCBjb21taXQsIGRlbGV0ZSB0aGUgbmV4dCBsaW5lLgogICAgW1sgLXogJFZDU19TVEFUVVNfTE9DQUxfQlJBTkNIICYmIC16ICRWQ1NfU1RBVFVTX0xPQ0FMX0JSQU5DSCBdXSAmJiAgIyA8LS0gdGhpcyBsaW5lCiAgICAgIHJlcys9IiR7bWV0YX1AJHtjbGVhbn0ke1ZDU19TVEFUVVNfQ09NTUlUWzEsOF19IgoKICAgICMgU2hvdyB0cmFja2luZyBicmFuY2ggbmFtZSBpZiBpdCBkaWZmZXJzIGZyb20gbG9jYWwgYnJhbmNoLgogICAgaWYgW1sgLW4gJHtWQ1NfU1RBVFVTX1JFTU9URV9CUkFOQ0g6IyRWQ1NfU1RBVFVTX0xPQ0FMX0JSQU5DSH0gXV07IHRoZW4KICAgICAgcmVzKz0iJHttZXRhfToke2NsZWFufSR7KFYpVkNTX1NUQVRVU19SRU1PVEVfQlJBTkNILy9cJS8lJX0iCiAgICBmaQoKICAgICMg4oejNDIgaWYgYmVoaW5kIHRoZSByZW1vdGUuCiAgICAoKCBWQ1NfU1RBVFVTX0NPTU1JVFNfQkVISU5EICkpICYmIHJlcys9IiAke2NsZWFufeKHoyR7VkNTX1NUQVRVU19DT01NSVRTX0JFSElORH0iCiAgICAjIOKHoTQyIGlmIGFoZWFkIG9mIHRoZSByZW1vdGU7IG5vIGxlYWRpbmcgc3BhY2UgaWYgYWxzbyBiZWhpbmQgdGhlIHJlbW90ZTog4oejNDLih6E0Mi4KICAgICgoIFZDU19TVEFUVVNfQ09NTUlUU19BSEVBRCAmJiAhVkNTX1NUQVRVU19DT01NSVRTX0JFSElORCApKSAmJiByZXMrPSIgIgogICAgKCggVkNTX1NUQVRVU19DT01NSVRTX0FIRUFEICApKSAmJiByZXMrPSIke2NsZWFufeKHoSR7VkNTX1NUQVRVU19DT01NSVRTX0FIRUFEfSIKICAgICMg4oegNDIgaWYgYmVoaW5kIHRoZSBwdXNoIHJlbW90ZS4KICAgICgoIFZDU19TVEFUVVNfUFVTSF9DT01NSVRTX0JFSElORCApKSAmJiByZXMrPSIgJHtjbGVhbn3ih6Ake1ZDU19TVEFUVVNfUFVTSF9DT01NSVRTX0JFSElORH0iCiAgICAoKCBWQ1NfU1RBVFVTX1BVU0hfQ09NTUlUU19BSEVBRCAmJiAhVkNTX1NUQVRVU19QVVNIX0NPTU1JVFNfQkVISU5EICkpICYmIHJlcys9IiAiCiAgICAjIOKHojQyIGlmIGFoZWFkIG9mIHRoZSBwdXNoIHJlbW90ZTsgbm8gbGVhZGluZyBzcGFjZSBpZiBhbHNvIGJlaGluZDog4oegNDLih6I0Mi4KICAgICgoIFZDU19TVEFUVVNfUFVTSF9DT01NSVRTX0FIRUFEICApKSAmJiByZXMrPSIke2NsZWFufeKHoiR7VkNTX1NUQVRVU19QVVNIX0NPTU1JVFNfQUhFQUR9IgogICAgIyAqNDIgaWYgaGF2ZSBzdGFzaGVzLgogICAgKCggVkNTX1NUQVRVU19TVEFTSEVTICAgICAgICApKSAmJiByZXMrPSIgJHtjbGVhbn0qJHtWQ1NfU1RBVFVTX1NUQVNIRVN9IgogICAgIyAnbWVyZ2UnIGlmIHRoZSByZXBvIGlzIGluIGFuIHVudXN1YWwgc3RhdGUuCiAgICBbWyAtbiAkVkNTX1NUQVRVU19BQ1RJT04gICAgIF1dICYmIHJlcys9IiAke2NvbmZsaWN0ZWR9JHtWQ1NfU1RBVFVTX0FDVElPTn0iCiAgICAjIH40MiBpZiBoYXZlIG1lcmdlIGNvbmZsaWN0cy4KICAgICgoIFZDU19TVEFUVVNfTlVNX0NPTkZMSUNURUQgKSkgJiYgcmVzKz0iICR7Y29uZmxpY3RlZH1+JHtWQ1NfU1RBVFVTX05VTV9DT05GTElDVEVEfSIKICAgICMgKzQyIGlmIGhhdmUgc3RhZ2VkIGNoYW5nZXMuCiAgICAoKCBWQ1NfU1RBVFVTX05VTV9TVEFHRUQgICAgICkpICYmIHJlcys9IiAke21vZGlmaWVkfSske1ZDU19TVEFUVVNfTlVNX1NUQUdFRH0iCiAgICAjICE0MiBpZiBoYXZlIHVuc3RhZ2VkIGNoYW5nZXMuCiAgICAoKCBWQ1NfU1RBVFVTX05VTV9VTlNUQUdFRCAgICkpICYmIHJlcys9IiAke21vZGlmaWVkfSEke1ZDU19TVEFUVVNfTlVNX1VOU1RBR0VEfSIKICAgICMgPzQyIGlmIGhhdmUgdW50cmFja2VkIGZpbGVzLiBJdCdzIHJlYWxseSBhIHF1ZXN0aW9uIG1hcmssIHlvdXIgZm9udCBpc24ndCBicm9rZW4uCiAgICAjIFNlZSBQT1dFUkxFVkVMOUtfVkNTX1VOVFJBQ0tFRF9JQ09OIGFib3ZlIGlmIHlvdSB3YW50IHRvIHVzZSBhIGRpZmZlcmVudCBpY29uLgogICAgIyBSZW1vdmUgdGhlIG5leHQgbGluZSBpZiB5b3UgZG9uJ3Qgd2FudCB0byBzZWUgdW50cmFja2VkIGZpbGVzIGF0IGFsbC4KICAgICgoIFZDU19TVEFUVVNfTlVNX1VOVFJBQ0tFRCAgKSkgJiYgcmVzKz0iICR7dW50cmFja2VkfSR7KGc6OilQT1dFUkxFVkVMOUtfVkNTX1VOVFJBQ0tFRF9JQ09OfSR7VkNTX1NUQVRVU19OVU1fVU5UUkFDS0VEfSIKICAgICMgIuKUgCIgaWYgdGhlIG51bWJlciBvZiB1bnN0YWdlZCBmaWxlcyBpcyB1bmtub3duLiBUaGlzIGNhbiBoYXBwZW4gZHVlIHRvCiAgICAjIFBPV0VSTEVWRUw5S19WQ1NfTUFYX0lOREVYX1NJWkVfRElSVFkgKHNlZSBiZWxvdykgYmVpbmcgc2V0IHRvIGEgbm9uLW5lZ2F0aXZlIG51bWJlciBsb3dlcgogICAgIyB0aGFuIHRoZSBudW1iZXIgb2YgZmlsZXMgaW4gdGhlIEdpdCBpbmRleCwgb3IgZHVlIHRvIGJhc2guc2hvd0RpcnR5U3RhdGUgYmVpbmcgc2V0IHRvIGZhbHNlCiAgICAjIGluIHRoZSByZXBvc2l0b3J5IGNvbmZpZy4gVGhlIG51bWJlciBvZiBzdGFnZWQgYW5kIHVudHJhY2tlZCBmaWxlcyBtYXkgYWxzbyBiZSB1bmtub3duCiAgICAjIGluIHRoaXMgY2FzZS4KICAgICgoIFZDU19TVEFUVVNfSEFTX1VOU1RBR0VEID09IC0xICkpICYmIHJlcys9IiAke21vZGlmaWVkfeKUgCIKCiAgICB0eXBlc2V0IC1nIG15X2dpdF9mb3JtYXQ9JHJlcwogIH0KICBmdW5jdGlvbnMgLU0gbXlfZ2l0X2Zvcm1hdHRlciAyPi9kZXYvbnVsbAoKICAjIERvbid0IGNvdW50IHRoZSBudW1iZXIgb2YgdW5zdGFnZWQsIHVudHJhY2tlZCBhbmQgY29uZmxpY3RlZCBmaWxlcyBpbiBHaXQgcmVwb3NpdG9yaWVzIHdpdGgKICAjIG1vcmUgdGhhbiB0aGlzIG1hbnkgZmlsZXMgaW4gdGhlIGluZGV4LiBOZWdhdGl2ZSB2YWx1ZSBtZWFucyBpbmZpbml0eS4KICAjCiAgIyBJZiB5b3UgYXJlIHdvcmtpbmcgaW4gR2l0IHJlcG9zaXRvcmllcyB3aXRoIHRlbnMgb2YgbWlsbGlvbnMgb2YgZmlsZXMgYW5kIHNlZWluZyBwZXJmb3JtYW5jZQogICMgc2FnZ2luZywgdHJ5IHNldHRpbmcgUE9XRVJMRVZFTDlLX1ZDU19NQVhfSU5ERVhfU0laRV9ESVJUWSB0byBhIG51bWJlciBsb3dlciB0aGFuIHRoZSBvdXRwdXQKICAjIG9mIGBnaXQgbHMtZmlsZXMgfCB3YyAtbGAuIEFsdGVybmF0aXZlbHksIGFkZCBgYmFzaC5zaG93RGlydHlTdGF0ZSA9IGZhbHNlYCB0byB0aGUgcmVwb3NpdG9yeSdzCiAgIyBjb25maWc6IGBnaXQgY29uZmlnIGJhc2guc2hvd0RpcnR5U3RhdGUgZmFsc2VgLgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX1ZDU19NQVhfSU5ERVhfU0laRV9ESVJUWT0tMQoKICAjIERvbid0IHNob3cgR2l0IHN0YXR1cyBpbiBwcm9tcHQgZm9yIHJlcG9zaXRvcmllcyB3aG9zZSB3b3JrZGlyIG1hdGNoZXMgdGhpcyBwYXR0ZXJuLgogICMgRm9yIGV4YW1wbGUsIGlmIHNldCB0byAnficsIHRoZSBHaXQgcmVwb3NpdG9yeSBhdCAkSE9NRS8uZ2l0IHdpbGwgYmUgaWdub3JlZC4KICAjIE11bHRpcGxlIHBhdHRlcm5zIGNhbiBiZSBjb21iaW5lZCB3aXRoICd8JzogJ34ofC9mb28pfC9iYXIvYmF6LyonLgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX1ZDU19ESVNBQkxFRF9XT1JLRElSX1BBVFRFUk49J34nCgogICMgRGlzYWJsZSB0aGUgZGVmYXVsdCBHaXQgc3RhdHVzIGZvcm1hdHRpbmcuCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfVkNTX0RJU0FCTEVfR0lUU1RBVFVTX0ZPUk1BVFRJTkc9dHJ1ZQogICMgSW5zdGFsbCBvdXIgb3duIEdpdCBzdGF0dXMgZm9ybWF0dGVyLgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX1ZDU19DT05URU5UX0VYUEFOU0lPTj0nJHskKChteV9naXRfZm9ybWF0dGVyKDEpKSkrJHtteV9naXRfZm9ybWF0fX0nCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfVkNTX0xPQURJTkdfQ09OVEVOVF9FWFBBTlNJT049JyR7JCgobXlfZ2l0X2Zvcm1hdHRlcigwKSkpKyR7bXlfZ2l0X2Zvcm1hdH19JwogICMgRW5hYmxlIGNvdW50ZXJzIGZvciBzdGFnZWQsIHVuc3RhZ2VkLCBldGMuCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfVkNTX3tTVEFHRUQsVU5TVEFHRUQsVU5UUkFDS0VELENPTkZMSUNURUQsQ09NTUlUU19BSEVBRCxDT01NSVRTX0JFSElORH1fTUFYX05VTT0tMQoKICAjIEljb24gY29sb3IuCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfVkNTX1ZJU1VBTF9JREVOVElGSUVSX0NPTE9SPTc2CiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfVkNTX0xPQURJTkdfVklTVUFMX0lERU5USUZJRVJfQ09MT1I9MjQ0CiAgIyBDdXN0b20gaWNvbi4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19WQ1NfVklTVUFMX0lERU5USUZJRVJfRVhQQU5TSU9OPQogICMgQ3VzdG9tIHByZWZpeC4KICAjIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX1ZDU19QUkVGSVg9JyUyNDhGb24gJwoKICAjIFNob3cgc3RhdHVzIG9mIHJlcG9zaXRvcmllcyBvZiB0aGVzZSB0eXBlcy4gWW91IGNhbiBhZGQgc3ZuIGFuZC9vciBoZyBpZiB5b3UgYXJlCiAgIyB1c2luZyB0aGVtLiBJZiB5b3UgZG8sIHlvdXIgcHJvbXB0IG1heSBiZWNvbWUgc2xvdyBldmVuIHdoZW4geW91ciBjdXJyZW50IGRpcmVjdG9yeQogICMgaXNuJ3QgaW4gYW4gc3ZuIG9yIGhnIHJlcG9zb3RpcnkuCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfVkNTX0JBQ0tFTkRTPShnaXQpCgogICMgVGhlc2Ugc2V0dGluZ3MgYXJlIHVzZWQgZm9yIHJlcG9zaXRvcmllcyBvdGhlciB0aGFuIEdpdCBvciB3aGVuIGdpdHN0YXR1c2QgZmFpbHMgYW5kCiAgIyBQb3dlcmxldmVsMTBrIGhhcyB0byBmYWxsIGJhY2sgdG8gdXNpbmcgdmNzX2luZm8uCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfVkNTX0NMRUFOX0ZPUkVHUk9VTkQ9NzYKICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19WQ1NfVU5UUkFDS0VEX0ZPUkVHUk9VTkQ9NzYKICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19WQ1NfTU9ESUZJRURfRk9SRUdST1VORD0xNzgKCiAgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNbIHN0YXR1czogZXhpdCBjb2RlIG9mIHRoZSBsYXN0IGNvbW1hbmQgXSMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICMgRW5hYmxlIE9LX1BJUEUsIEVSUk9SX1BJUEUgYW5kIEVSUk9SX1NJR05BTCBzdGF0dXMgc3RhdGVzIHRvIGFsbG93IHVzIHRvIGVuYWJsZSwgZGlzYWJsZSBhbmQKICAjIHN0eWxlIHRoZW0gaW5kZXBlbmRlbnRseSBmcm9tIHRoZSByZWd1bGFyIE9LIGFuZCBFUlJPUiBzdGF0ZS4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19TVEFUVVNfRVhURU5ERURfU1RBVEVTPXRydWUKCiAgIyBTdGF0dXMgb24gc3VjY2Vzcy4gTm8gY29udGVudCwganVzdCBhbiBpY29uLiBObyBuZWVkIHRvIHNob3cgaXQgaWYgcHJvbXB0X2NoYXIgaXMgZW5hYmxlZCBhcwogICMgaXQgd2lsbCBzaWduaWZ5IHN1Y2Nlc3MgYnkgdHVybmluZyBncmVlbi4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19TVEFUVVNfT0s9ZmFsc2UKICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19TVEFUVVNfT0tfRk9SRUdST1VORD03MAogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX1NUQVRVU19PS19WSVNVQUxfSURFTlRJRklFUl9FWFBBTlNJT049J+KclCcKCiAgIyBTdGF0dXMgd2hlbiBzb21lIHBhcnQgb2YgYSBwaXBlIGNvbW1hbmQgZmFpbHMgYnV0IHRoZSBvdmVyYWxsIGV4aXQgc3RhdHVzIGlzIHplcm8uIEl0IG1heSBsb29rCiAgIyBsaWtlIHRoaXM6IDF8MC4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19TVEFUVVNfT0tfUElQRT10cnVlCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfU1RBVFVTX09LX1BJUEVfRk9SRUdST1VORD03MAogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX1NUQVRVU19PS19QSVBFX1ZJU1VBTF9JREVOVElGSUVSX0VYUEFOU0lPTj0n4pyUJwoKICAjIFN0YXR1cyB3aGVuIGl0J3MganVzdCBhbiBlcnJvciBjb2RlIChlLmcuLCAnMScpLiBObyBuZWVkIHRvIHNob3cgaXQgaWYgcHJvbXB0X2NoYXIgaXMgZW5hYmxlZCBhcwogICMgaXQgd2lsbCBzaWduaWZ5IGVycm9yIGJ5IHR1cm5pbmcgcmVkLgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX1NUQVRVU19FUlJPUj1mYWxzZQogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX1NUQVRVU19FUlJPUl9GT1JFR1JPVU5EPTE2MAogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX1NUQVRVU19FUlJPUl9WSVNVQUxfSURFTlRJRklFUl9FWFBBTlNJT049J+KcmCcKCiAgIyBTdGF0dXMgd2hlbiB0aGUgbGFzdCBjb21tYW5kIHdhcyB0ZXJtaW5hdGVkIGJ5IGEgc2lnbmFsLgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX1NUQVRVU19FUlJPUl9TSUdOQUw9dHJ1ZQogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX1NUQVRVU19FUlJPUl9TSUdOQUxfRk9SRUdST1VORD0xNjAKICAjIFVzZSB0ZXJzZSBzaWduYWwgbmFtZXM6ICJJTlQiIGluc3RlYWQgb2YgIlNJR0lOVCgyKSIuCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfU1RBVFVTX1ZFUkJPU0VfU0lHTkFNRT1mYWxzZQogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX1NUQVRVU19FUlJPUl9TSUdOQUxfVklTVUFMX0lERU5USUZJRVJfRVhQQU5TSU9OPSfinJgnCgogICMgU3RhdHVzIHdoZW4gc29tZSBwYXJ0IG9mIGEgcGlwZSBjb21tYW5kIGZhaWxzIGFuZCB0aGUgb3ZlcmFsbCBleGl0IHN0YXR1cyBpcyBhbHNvIG5vbi16ZXJvLgogICMgSXQgbWF5IGxvb2sgbGlrZSB0aGlzOiAxfDAuCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfU1RBVFVTX0VSUk9SX1BJUEU9dHJ1ZQogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX1NUQVRVU19FUlJPUl9QSVBFX0ZPUkVHUk9VTkQ9MTYwCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfU1RBVFVTX0VSUk9SX1BJUEVfVklTVUFMX0lERU5USUZJRVJfRVhQQU5TSU9OPSfinJgnCgogICMjIyMjIyMjIyMjIyMjIyMjIyNbIGNvbW1hbmRfZXhlY3V0aW9uX3RpbWU6IGR1cmF0aW9uIG9mIHRoZSBsYXN0IGNvbW1hbmQgXSMjIyMjIyMjIyMjIyMjIyMjIyMKICAjIFNob3cgZHVyYXRpb24gb2YgdGhlIGxhc3QgY29tbWFuZCBpZiB0YWtlcyBhdCBsZWFzdCB0aGlzIG1hbnkgc2Vjb25kcy4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19DT01NQU5EX0VYRUNVVElPTl9USU1FX1RIUkVTSE9MRD0zCiAgIyBTaG93IHRoaXMgbWFueSBmcmFjdGlvbmFsIGRpZ2l0cy4gWmVybyBtZWFucyByb3VuZCB0byBzZWNvbmRzLgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0NPTU1BTkRfRVhFQ1VUSU9OX1RJTUVfUFJFQ0lTSU9OPTAKICAjIEV4ZWN1dGlvbiB0aW1lIGNvbG9yLgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0NPTU1BTkRfRVhFQ1VUSU9OX1RJTUVfRk9SRUdST1VORD0yNDgKICAjIER1cmF0aW9uIGZvcm1hdDogMWQgMmggM20gNHMuCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfQ09NTUFORF9FWEVDVVRJT05fVElNRV9GT1JNQVQ9J2QgaCBtIHMnCiAgIyBDdXN0b20gaWNvbi4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19DT01NQU5EX0VYRUNVVElPTl9USU1FX1ZJU1VBTF9JREVOVElGSUVSX0VYUEFOU0lPTj0KICAjIEN1c3RvbSBwcmVmaXguCiAgIyB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19DT01NQU5EX0VYRUNVVElPTl9USU1FX1BSRUZJWD0nJTI0OEZ0b29rICcKCiAgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNbIGJhY2tncm91bmRfam9iczogcHJlc2VuY2Ugb2YgYmFja2dyb3VuZCBqb2JzIF0jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICMgRG9uJ3Qgc2hvdyB0aGUgbnVtYmVyIG9mIGJhY2tncm91bmQgam9icy4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19CQUNLR1JPVU5EX0pPQlNfVkVSQk9TRT1mYWxzZQogICMgQmFja2dyb3VuZCBqb2JzIGNvbG9yLgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0JBQ0tHUk9VTkRfSk9CU19GT1JFR1JPVU5EPTM3CiAgIyBDdXN0b20gaWNvbi4KICAjIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0JBQ0tHUk9VTkRfSk9CU19WSVNVQUxfSURFTlRJRklFUl9FWFBBTlNJT049J+KtkCcKCiAgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNbIGRpcmVudjogZGlyZW52IHN0YXR1cyAoaHR0cHM6Ly9kaXJlbnYubmV0LykgXSMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICMgRGlyZW52IGNvbG9yLgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0RJUkVOVl9GT1JFR1JPVU5EPTE3OAogICMgQ3VzdG9tIGljb24uCiAgIyB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19ESVJFTlZfVklTVUFMX0lERU5USUZJRVJfRVhQQU5TSU9OPSfirZAnCgogICMjIyMjIyMjIyMjIyMjI1sgYXNkZjogYXNkZiB2ZXJzaW9uIG1hbmFnZXIgKGh0dHBzOi8vZ2l0aHViLmNvbS9hc2RmLXZtL2FzZGYpIF0jIyMjIyMjIyMjIyMjIyMKICAjIERlZmF1bHQgYXNkZiBjb2xvci4gT25seSB1c2VkIHRvIGRpc3BsYXkgdG9vbHMgZm9yIHdoaWNoIHRoZXJlIGlzIG5vIGNvbG9yIG92ZXJyaWRlIChzZWUgYmVsb3cpLgogICMgVGlwOiAgT3ZlcnJpZGUgdGhpcyBwYXJhbWV0ZXIgZm9yICR7VE9PTH0gd2l0aCBQT1dFUkxFVkVMOUtfQVNERl8ke1RPT0x9X0ZPUkVHUk9VTkQuCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfQVNERl9GT1JFR1JPVU5EPTY2CgogICMgVGhlcmUgYXJlIGZvdXIgcGFyYW1ldGVycyB0aGF0IGNhbiBiZSB1c2VkIHRvIGhpZGUgYXNkZiB0b29scy4gRWFjaCBwYXJhbWV0ZXIgZGVzY3JpYmVzCiAgIyBjb25kaXRpb25zIHVuZGVyIHdoaWNoIGEgdG9vbCBnZXRzIGhpZGRlbi4gUGFyYW1ldGVycyBjYW4gaGlkZSB0b29scyBidXQgbm90IHVuaGlkZSB0aGVtLiBJZiBhdAogICMgbGVhc3Qgb25lIHBhcmFtZXRlciBkZWNpZGVzIHRvIGhpZGUgYSB0b29sLCB0aGF0IHRvb2wgZ2V0cyBoaWRkZW4uIElmIG5vIHBhcmFtZXRlciBkZWNpZGVzIHRvCiAgIyBoaWRlIGEgdG9vbCwgaXQgZ2V0cyBzaG93bi4KICAjCiAgIyBTcGVjaWFsIG5vdGUgb24gdGhlIGRpZmZlcmVuY2UgYmV0d2VlbiBQT1dFUkxFVkVMOUtfQVNERl9TT1VSQ0VTIGFuZAogICMgUE9XRVJMRVZFTDlLX0FTREZfUFJPTVBUX0FMV0FZU19TSE9XLiBDb25zaWRlciB0aGUgZWZmZWN0IG9mIHRoZSBmb2xsb3dpbmcgY29tbWFuZHM6CiAgIwogICMgICBhc2RmIGxvY2FsICBweXRob24gMy44LjEKICAjICAgYXNkZiBnbG9iYWwgcHl0aG9uIDMuOC4xCiAgIwogICMgQWZ0ZXIgcnVubmluZyBib3RoIGNvbW1hbmRzIHRoZSBjdXJyZW50IHB5dGhvbiB2ZXJzaW9uIGlzIDMuOC4xIGFuZCBpdHMgc291cmNlIGlzICJsb2NhbCIgYXMKICAjIGl0IHRha2VzIHByZWNlZGVuY2Ugb3ZlciAiZ2xvYmFsIi4gSWYgUE9XRVJMRVZFTDlLX0FTREZfUFJPTVBUX0FMV0FZU19TSE9XIGlzIHNldCB0byBmYWxzZSwKICAjIGl0J2xsIGhpZGUgcHl0aG9uIHZlcnNpb24gaW4gdGhpcyBjYXNlIGJlY2F1c2UgMy44LjEgaXMgdGhlIHNhbWUgYXMgdGhlIGdsb2JhbCB2ZXJzaW9uLgogICMgUE9XRVJMRVZFTDlLX0FTREZfU09VUkNFUyB3aWxsIGhpZGUgcHl0aG9uIHZlcnNpb24gb25seSBpZiB0aGUgdmFsdWUgb2YgdGhpcyBwYXJhbWV0ZXIgZG9lc24ndAogICMgY29udGFpbiAibG9jYWwiLgoKICAjIEhpZGUgdG9vbCB2ZXJzaW9ucyB0aGF0IGRvbid0IGNvbWUgZnJvbSBvbmUgb2YgdGhlc2Ugc291cmNlcy4KICAjCiAgIyBBdmFpbGFibGUgc291cmNlczoKICAjCiAgIyAtIHNoZWxsICAgYGFzZGYgY3VycmVudGAgc2F5cyAic2V0IGJ5IEFTREZfJHtUT09MfV9WRVJTSU9OIGVudmlyb25tZW50IHZhcmlhYmxlIgogICMgLSBsb2NhbCAgIGBhc2RmIGN1cnJlbnRgIHNheXMgInNldCBieSAvc29tZS9ub3QvaG9tZS9kaXJlY3RvcnkvZmlsZSIKICAjIC0gZ2xvYmFsICBgYXNkZiBjdXJyZW50YCBzYXlzICJzZXQgYnkgL2hvbWUvdXNlcm5hbWUvZmlsZSIKICAjCiAgIyBOb3RlOiBJZiB0aGlzIHBhcmFtZXRlciBpcyBzZXQgdG8gKHNoZWxsIGxvY2FsIGdsb2JhbCksIGl0IHdvbid0IGhpZGUgdG9vbHMuCiAgIyBUaXA6ICBPdmVycmlkZSB0aGlzIHBhcmFtZXRlciBmb3IgJHtUT09MfSB3aXRoIFBPV0VSTEVWRUw5S19BU0RGXyR7VE9PTH1fU09VUkNFUy4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19BU0RGX1NPVVJDRVM9KHNoZWxsIGxvY2FsIGdsb2JhbCkKCiAgIyBJZiBzZXQgdG8gZmFsc2UsIGhpZGUgdG9vbCB2ZXJzaW9ucyB0aGF0IGFyZSB0aGUgc2FtZSBhcyBnbG9iYWwuCiAgIwogICMgTm90ZTogVGhlIG5hbWUgb2YgdGhpcyBwYXJhbWV0ZXIgZG9lc24ndCByZWZsZWN0IGl0cyBtZWFuaW5nIGF0IGFsbC4KICAjIE5vdGU6IElmIHRoaXMgcGFyYW1ldGVyIGlzIHNldCB0byB0cnVlLCBpdCB3b24ndCBoaWRlIHRvb2xzLgogICMgVGlwOiAgT3ZlcnJpZGUgdGhpcyBwYXJhbWV0ZXIgZm9yICR7VE9PTH0gd2l0aCBQT1dFUkxFVkVMOUtfQVNERl8ke1RPT0x9X1BST01QVF9BTFdBWVNfU0hPVy4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19BU0RGX1BST01QVF9BTFdBWVNfU0hPVz1mYWxzZQoKICAjIElmIHNldCB0byBmYWxzZSwgaGlkZSB0b29sIHZlcnNpb25zIHRoYXQgYXJlIGVxdWFsIHRvICJzeXN0ZW0iLgogICMKICAjIE5vdGU6IElmIHRoaXMgcGFyYW1ldGVyIGlzIHNldCB0byB0cnVlLCBpdCB3b24ndCBoaWRlIHRvb2xzLgogICMgVGlwOiBPdmVycmlkZSB0aGlzIHBhcmFtZXRlciBmb3IgJHtUT09MfSB3aXRoIFBPV0VSTEVWRUw5S19BU0RGXyR7VE9PTH1fU0hPV19TWVNURU0uCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfQVNERl9TSE9XX1NZU1RFTT10cnVlCgogICMgSWYgc2V0IHRvIG5vbi1lbXB0eSB2YWx1ZSwgaGlkZSB0b29scyB1bmxlc3MgdGhlcmUgaXMgYSBmaWxlIG1hdGNoaW5nIHRoZSBzcGVjaWZpZWQgZmlsZSBwYXR0ZXJuCiAgIyBpbiB0aGUgY3VycmVudCBkaXJlY3RvcnksIG9yIGl0cyBwYXJlbnQgZGlyZWN0b3J5LCBvciBpdHMgZ3JhbmRwYXJlbnQgZGlyZWN0b3J5LCBhbmQgc28gb24uCiAgIwogICMgTm90ZTogSWYgdGhpcyBwYXJhbWV0ZXIgaXMgc2V0IHRvIGVtcHR5IHZhbHVlLCBpdCB3b24ndCBoaWRlIHRvb2xzLgogICMgTm90ZTogU0hPV19PTl9VUEdMT0IgaXNuJ3Qgc3BlY2lmaWMgdG8gYXNkZi4gSXQgd29ya3Mgd2l0aCBhbGwgcHJvbXB0IHNlZ21lbnRzLgogICMgVGlwOiBPdmVycmlkZSB0aGlzIHBhcmFtZXRlciBmb3IgJHtUT09MfSB3aXRoIFBPV0VSTEVWRUw5S19BU0RGXyR7VE9PTH1fU0hPV19PTl9VUEdMT0IuCiAgIwogICMgRXhhbXBsZTogSGlkZSBub2RlanMgdmVyc2lvbiB3aGVuIHRoZXJlIGlzIG5vIHBhY2thZ2UuanNvbiBhbmQgbm8gKi5qcyBmaWxlcyBpbiB0aGUgY3VycmVudAogICMgZGlyZWN0b3J5LCBpbiBgLi5gLCBpbiBgLi4vLi5gIGFuZCBzbyBvbi4KICAjCiAgIyAgIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0FTREZfTk9ERUpTX1NIT1dfT05fVVBHTE9CPScqLmpzfHBhY2thZ2UuanNvbicKICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19BU0RGX1NIT1dfT05fVVBHTE9CPQoKICAjIFJ1YnkgdmVyc2lvbiBmcm9tIGFzZGYuCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfQVNERl9SVUJZX0ZPUkVHUk9VTkQ9MTY4CiAgIyB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19BU0RGX1JVQllfVklTVUFMX0lERU5USUZJRVJfRVhQQU5TSU9OPSfirZAnCiAgIyB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19BU0RGX1JVQllfU0hPV19PTl9VUEdMT0I9JyouZm9vfCouYmFyJwoKICAjIFB5dGhvbiB2ZXJzaW9uIGZyb20gYXNkZi4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19BU0RGX1BZVEhPTl9GT1JFR1JPVU5EPTM3CiAgIyB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19BU0RGX1BZVEhPTl9WSVNVQUxfSURFTlRJRklFUl9FWFBBTlNJT049J+KtkCcKICAjIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0FTREZfUFlUSE9OX1NIT1dfT05fVVBHTE9CPScqLmZvb3wqLmJhcicKCiAgIyBHbyB2ZXJzaW9uIGZyb20gYXNkZi4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19BU0RGX0dPTEFOR19GT1JFR1JPVU5EPTM3CiAgIyB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19BU0RGX0dPTEFOR19WSVNVQUxfSURFTlRJRklFUl9FWFBBTlNJT049J+KtkCcKICAjIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0FTREZfR09MQU5HX1NIT1dfT05fVVBHTE9CPScqLmZvb3wqLmJhcicKCiAgIyBOb2RlLmpzIHZlcnNpb24gZnJvbSBhc2RmLgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0FTREZfTk9ERUpTX0ZPUkVHUk9VTkQ9NzAKICAjIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0FTREZfTk9ERUpTX1ZJU1VBTF9JREVOVElGSUVSX0VYUEFOU0lPTj0n4q2QJwogICMgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfQVNERl9OT0RFSlNfU0hPV19PTl9VUEdMT0I9JyouZm9vfCouYmFyJwoKICAjIFJ1c3QgdmVyc2lvbiBmcm9tIGFzZGYuCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfQVNERl9SVVNUX0ZPUkVHUk9VTkQ9MzcKICAjIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0FTREZfUlVTVF9WSVNVQUxfSURFTlRJRklFUl9FWFBBTlNJT049J+KtkCcKICAjIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0FTREZfUlVTVF9TSE9XX09OX1VQR0xPQj0nKi5mb298Ki5iYXInCgogICMgLk5FVCBDb3JlIHZlcnNpb24gZnJvbSBhc2RmLgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0FTREZfRE9UTkVUX0NPUkVfRk9SRUdST1VORD0xMzQKICAjIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0FTREZfRE9UTkVUX0NPUkVfVklTVUFMX0lERU5USUZJRVJfRVhQQU5TSU9OPSfirZAnCiAgIyB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19BU0RGX0RPVE5FVF9DT1JFX1NIT1dfT05fVVBHTE9CPScqLmZvb3wqLmJhcicKCiAgIyBGbHV0dGVyIHZlcnNpb24gZnJvbSBhc2RmLgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0FTREZfRkxVVFRFUl9GT1JFR1JPVU5EPTM4CiAgIyB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19BU0RGX0ZMVVRURVJfVklTVUFMX0lERU5USUZJRVJfRVhQQU5TSU9OPSfirZAnCiAgIyB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19BU0RGX0ZMVVRURVJfU0hPV19PTl9VUEdMT0I9JyouZm9vfCouYmFyJwoKICAjIEx1YSB2ZXJzaW9uIGZyb20gYXNkZi4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19BU0RGX0xVQV9GT1JFR1JPVU5EPTMyCiAgIyB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19BU0RGX0xVQV9WSVNVQUxfSURFTlRJRklFUl9FWFBBTlNJT049J+KtkCcKICAjIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0FTREZfTFVBX1NIT1dfT05fVVBHTE9CPScqLmZvb3wqLmJhcicKCiAgIyBKYXZhIHZlcnNpb24gZnJvbSBhc2RmLgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0FTREZfSkFWQV9GT1JFR1JPVU5EPTMyCiAgIyB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19BU0RGX0pBVkFfVklTVUFMX0lERU5USUZJRVJfRVhQQU5TSU9OPSfirZAnCiAgIyB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19BU0RGX0pBVkFfU0hPV19PTl9VUEdMT0I9JyouZm9vfCouYmFyJwoKICAjIFBlcmwgdmVyc2lvbiBmcm9tIGFzZGYuCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfQVNERl9QRVJMX0ZPUkVHUk9VTkQ9NjcKICAjIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0FTREZfUEVSTF9WSVNVQUxfSURFTlRJRklFUl9FWFBBTlNJT049J+KtkCcKICAjIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0FTREZfUEVSTF9TSE9XX09OX1VQR0xPQj0nKi5mb298Ki5iYXInCgogICMgRXJsYW5nIHZlcnNpb24gZnJvbSBhc2RmLgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0FTREZfRVJMQU5HX0ZPUkVHUk9VTkQ9MTI1CiAgIyB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19BU0RGX0VSTEFOR19WSVNVQUxfSURFTlRJRklFUl9FWFBBTlNJT049J+KtkCcKICAjIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0FTREZfRVJMQU5HX1NIT1dfT05fVVBHTE9CPScqLmZvb3wqLmJhcicKCiAgIyBFbGl4aXIgdmVyc2lvbiBmcm9tIGFzZGYuCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfQVNERl9FTElYSVJfRk9SRUdST1VORD0xMjkKICAjIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0FTREZfRUxJWElSX1ZJU1VBTF9JREVOVElGSUVSX0VYUEFOU0lPTj0n4q2QJwogICMgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfQVNERl9FTElYSVJfU0hPV19PTl9VUEdMT0I9JyouZm9vfCouYmFyJwoKICAjIFBvc3RncmVzIHZlcnNpb24gZnJvbSBhc2RmLgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0FTREZfUE9TVEdSRVNfRk9SRUdST1VORD0zMQogICMgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfQVNERl9QT1NUR1JFU19WSVNVQUxfSURFTlRJRklFUl9FWFBBTlNJT049J+KtkCcKICAjIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0FTREZfUE9TVEdSRVNfU0hPV19PTl9VUEdMT0I9JyouZm9vfCouYmFyJwoKICAjIFBIUCB2ZXJzaW9uIGZyb20gYXNkZi4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19BU0RGX1BIUF9GT1JFR1JPVU5EPTk5CiAgIyB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19BU0RGX1BIUF9WSVNVQUxfSURFTlRJRklFUl9FWFBBTlNJT049J+KtkCcKICAjIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0FTREZfUEhQX1NIT1dfT05fVVBHTE9CPScqLmZvb3wqLmJhcicKCiAgIyBIYXNrZWxsIHZlcnNpb24gZnJvbSBhc2RmLgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0FTREZfSEFTS0VMTF9GT1JFR1JPVU5EPTE3MgogICMgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfQVNERl9IQVNLRUxMX1ZJU1VBTF9JREVOVElGSUVSX0VYUEFOU0lPTj0n4q2QJwogICMgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfQVNERl9IQVNLRUxMX1NIT1dfT05fVVBHTE9CPScqLmZvb3wqLmJhcicKCiAgIyBKdWxpYSB2ZXJzaW9uIGZyb20gYXNkZi4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19BU0RGX0pVTElBX0ZPUkVHUk9VTkQ9NzAKICAjIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0FTREZfSlVMSUFfVklTVUFMX0lERU5USUZJRVJfRVhQQU5TSU9OPSfirZAnCiAgIyB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19BU0RGX0pVTElBX1NIT1dfT05fVVBHTE9CPScqLmZvb3wqLmJhcicKCiAgIyMjIyMjIyMjI1sgbm9yZHZwbjogbm9yZHZwbiBjb25uZWN0aW9uIHN0YXR1cywgbGludXggb25seSAoaHR0cHM6Ly9ub3JkdnBuLmNvbS8pIF0jIyMjIyMjIyMjIwogICMgTm9yZFZQTiBjb25uZWN0aW9uIGluZGljYXRvciBjb2xvci4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19OT1JEVlBOX0ZPUkVHUk9VTkQ9MzkKICAjIEhpZGUgTm9yZFZQTiBjb25uZWN0aW9uIGluZGljYXRvciB3aGVuIG5vdCBjb25uZWN0ZWQuCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfTk9SRFZQTl97RElTQ09OTkVDVEVELENPTk5FQ1RJTkcsRElTQ09OTkVDVElOR31fQ09OVEVOVF9FWFBBTlNJT049CiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfTk9SRFZQTl97RElTQ09OTkVDVEVELENPTk5FQ1RJTkcsRElTQ09OTkVDVElOR31fVklTVUFMX0lERU5USUZJRVJfRVhQQU5TSU9OPQogICMgQ3VzdG9tIGljb24uCiAgIyB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19OT1JEVlBOX1ZJU1VBTF9JREVOVElGSUVSX0VYUEFOU0lPTj0n4q2QJwoKICAjIyMjIyMjIyMjIyMjIyMjI1sgcmFuZ2VyOiByYW5nZXIgc2hlbGwgKGh0dHBzOi8vZ2l0aHViLmNvbS9yYW5nZXIvcmFuZ2VyKSBdIyMjIyMjIyMjIyMjIyMjIyMjCiAgIyBSYW5nZXIgc2hlbGwgY29sb3IuCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfUkFOR0VSX0ZPUkVHUk9VTkQ9MTc4CiAgIyBDdXN0b20gaWNvbi4KICAjIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX1JBTkdFUl9WSVNVQUxfSURFTlRJRklFUl9FWFBBTlNJT049J+KtkCcKCiAgIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1sgbm5uOiBubm4gc2hlbGwgKGh0dHBzOi8vZ2l0aHViLmNvbS9qYXJ1bi9ubm4pIF0jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICMgTm5uIHNoZWxsIGNvbG9yLgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX05OTl9GT1JFR1JPVU5EPTcyCiAgIyBDdXN0b20gaWNvbi4KICAjIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX05OTl9WSVNVQUxfSURFTlRJRklFUl9FWFBBTlNJT049J+KtkCcKCiAgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjWyB2aW1fc2hlbGw6IHZpbSBzaGVsbCBpbmRpY2F0b3IgKDpzaCkgXSMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICMgVmltIHNoZWxsIGluZGljYXRvciBjb2xvci4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19WSU1fU0hFTExfRk9SRUdST1VORD0zNAogICMgQ3VzdG9tIGljb24uCiAgIyB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19WSU1fU0hFTExfVklTVUFMX0lERU5USUZJRVJfRVhQQU5TSU9OPSfirZAnCgogICMjIyMjI1sgbWlkbmlnaHRfY29tbWFuZGVyOiBtaWRuaWdodCBjb21tYW5kZXIgc2hlbGwgKGh0dHBzOi8vbWlkbmlnaHQtY29tbWFuZGVyLm9yZy8pIF0jIyMjIyMKICAjIE1pZG5pZ2h0IENvbW1hbmRlciBzaGVsbCBjb2xvci4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19NSUROSUdIVF9DT01NQU5ERVJfRk9SRUdST1VORD0xNzgKICAjIEN1c3RvbSBpY29uLgogICMgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfTUlETklHSFRfQ09NTUFOREVSX1ZJU1VBTF9JREVOVElGSUVSX0VYUEFOU0lPTj0n4q2QJwoKICAjWyBuaXhfc2hlbGw6IG5peCBzaGVsbCAoaHR0cHM6Ly9uaXhvcy5vcmcvbml4b3Mvbml4LXBpbGxzL2RldmVsb3Bpbmctd2l0aC1uaXgtc2hlbGwuaHRtbCkgXSMjCiAgIyBOaXggc2hlbGwgY29sb3IuCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfTklYX1NIRUxMX0ZPUkVHUk9VTkQ9NzQKCiAgIyBUaXA6IElmIHlvdSB3YW50IHRvIHNlZSBqdXN0IHRoZSBpY29uIHdpdGhvdXQgInB1cmUiIGFuZCAiaW1wdXJlIiwgdW5jb21tZW50IHRoZSBuZXh0IGxpbmUuCiAgIyB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19OSVhfU0hFTExfQ09OVEVOVF9FWFBBTlNJT049CgogICMgQ3VzdG9tIGljb24uCiAgIyB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19OSVhfU0hFTExfVklTVUFMX0lERU5USUZJRVJfRVhQQU5TSU9OPSfirZAnCgogICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNbIGRpc2tfdXNhZ2U6IGRpc2sgdXNhZ2UgXSMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAjIENvbG9ycyBmb3IgZGlmZmVyZW50IGxldmVscyBvZiBkaXNrIHVzYWdlLgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0RJU0tfVVNBR0VfTk9STUFMX0ZPUkVHUk9VTkQ9MzUKICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19ESVNLX1VTQUdFX1dBUk5JTkdfRk9SRUdST1VORD0yMjAKICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19ESVNLX1VTQUdFX0NSSVRJQ0FMX0ZPUkVHUk9VTkQ9MTYwCiAgIyBUaHJlc2hvbGRzIGZvciBkaWZmZXJlbnQgbGV2ZWxzIG9mIGRpc2sgdXNhZ2UgKHBlcmNlbnRhZ2UgcG9pbnRzKS4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19ESVNLX1VTQUdFX1dBUk5JTkdfTEVWRUw9OTAKICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19ESVNLX1VTQUdFX0NSSVRJQ0FMX0xFVkVMPTk1CiAgIyBJZiBzZXQgdG8gdHJ1ZSwgaGlkZSBkaXNrIHVzYWdlIHdoZW4gYmVsb3cgJFBPV0VSTEVWRUw5S19ESVNLX1VTQUdFX1dBUk5JTkdfTEVWRUwgcGVyY2VudC4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19ESVNLX1VTQUdFX09OTFlfV0FSTklORz1mYWxzZQogICMgQ3VzdG9tIGljb24uCiAgIyB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19ESVNLX1VTQUdFX1ZJU1VBTF9JREVOVElGSUVSX0VYUEFOU0lPTj0n4q2QJwoKICAjIyMjIyMjIyMjI1sgdmlfbW9kZTogdmkgbW9kZSAoeW91IGRvbid0IG5lZWQgdGhpcyBpZiB5b3UndmUgZW5hYmxlZCBwcm9tcHRfY2hhcikgXSMjIyMjIyMjIyMjCiAgIyBUZXh0IGFuZCBjb2xvciBmb3Igbm9ybWFsIChhLmsuYS4gY29tbWFuZCkgdmkgbW9kZS4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19WSV9DT01NQU5EX01PREVfU1RSSU5HPU5PUk1BTAogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX1ZJX01PREVfTk9STUFMX0ZPUkVHUk9VTkQ9MTA2CiAgIyBUZXh0IGFuZCBjb2xvciBmb3IgdmlzdWFsIHZpIG1vZGUuCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfVklfVklTVUFMX01PREVfU1RSSU5HPVZJU1VBTAogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX1ZJX01PREVfVklTVUFMX0ZPUkVHUk9VTkQ9NjgKICAjIFRleHQgYW5kIGNvbG9yIGZvciBvdmVydHlwZSAoYS5rLmEuIG92ZXJ3cml0ZSBhbmQgcmVwbGFjZSkgdmkgbW9kZS4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19WSV9PVkVSV1JJVEVfTU9ERV9TVFJJTkc9T1ZFUlRZUEUKICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19WSV9NT0RFX09WRVJXUklURV9GT1JFR1JPVU5EPTE3MgogICMgVGV4dCBhbmQgY29sb3IgZm9yIGluc2VydCB2aSBtb2RlLgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX1ZJX0lOU0VSVF9NT0RFX1NUUklORz0KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19WSV9NT0RFX0lOU0VSVF9GT1JFR1JPVU5EPTY2CgogICMgQ3VzdG9tIGljb24uCiAgIyB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19SQU5HRVJfVklTVUFMX0lERU5USUZJRVJfRVhQQU5TSU9OPSfirZAnCgogICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjWyByYW06IGZyZWUgUkFNIF0jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAjIFJBTSBjb2xvci4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19SQU1fRk9SRUdST1VORD02NgogICMgQ3VzdG9tIGljb24uCiAgIyB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19SQU1fVklTVUFMX0lERU5USUZJRVJfRVhQQU5TSU9OPSfirZAnCgogICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNbIHN3YXA6IHVzZWQgc3dhcCBdIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAjIFN3YXAgY29sb3IuCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfU1dBUF9GT1JFR1JPVU5EPTk2CiAgIyBDdXN0b20gaWNvbi4KICAjIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX1NXQVBfVklTVUFMX0lERU5USUZJRVJfRVhQQU5TSU9OPSfirZAnCgogICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjWyBsb2FkOiBDUFUgbG9hZCBdIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAjIFNob3cgYXZlcmFnZSBDUFUgbG9hZCBvdmVyIHRoaXMgbWFueSBsYXN0IG1pbnV0ZXMuIFZhbGlkIHZhbHVlcyBhcmUgMSwgNSBhbmQgMTUuCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfTE9BRF9XSElDSD01CiAgIyBMb2FkIGNvbG9yIHdoZW4gbG9hZCBpcyB1bmRlciA1MCUuCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfTE9BRF9OT1JNQUxfRk9SRUdST1VORD02NgogICMgTG9hZCBjb2xvciB3aGVuIGxvYWQgaXMgYmV0d2VlbiA1MCUgYW5kIDcwJS4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19MT0FEX1dBUk5JTkdfRk9SRUdST1VORD0xNzgKICAjIExvYWQgY29sb3Igd2hlbiBsb2FkIGlzIG92ZXIgNzAlLgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0xPQURfQ1JJVElDQUxfRk9SRUdST1VORD0xNjYKICAjIEN1c3RvbSBpY29uLgogICMgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfTE9BRF9WSVNVQUxfSURFTlRJRklFUl9FWFBBTlNJT049J+KtkCcKCiAgIyMjIyMjIyMjIyMjIyMjI1sgdG9kbzogdG9kbyBpdGVtcyAoaHR0cHM6Ly9naXRodWIuY29tL3RvZG90eHQvdG9kby50eHQtY2xpKSBdIyMjIyMjIyMjIyMjIyMjIwogICMgVG9kbyBjb2xvci4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19UT0RPX0ZPUkVHUk9VTkQ9MTEwCiAgIyBIaWRlIHRvZG8gd2hlbiB0aGUgdG90YWwgbnVtYmVyIG9mIHRhc2tzIGlzIHplcm8uCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfVE9ET19ISURFX1pFUk9fVE9UQUw9dHJ1ZQogICMgSGlkZSB0b2RvIHdoZW4gdGhlIG51bWJlciBvZiB0YXNrcyBhZnRlciBmaWx0ZXJpbmcgaXMgemVyby4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19UT0RPX0hJREVfWkVST19GSUxURVJFRD1mYWxzZQoKICAjIFRvZG8gZm9ybWF0LiBUaGUgZm9sbG93aW5nIHBhcmFtZXRlcnMgYXJlIGF2YWlsYWJsZSB3aXRoaW4gdGhlIGV4cGFuc2lvbi4KICAjCiAgIyAtIFA5S19UT0RPX1RPVEFMX1RBU0tfQ09VTlQgICAgIFRoZSB0b3RhbCBudW1iZXIgb2YgdGFza3MuCiAgIyAtIFA5S19UT0RPX0ZJTFRFUkVEX1RBU0tfQ09VTlQgIFRoZSBudW1iZXIgb2YgdGFza3MgYWZ0ZXIgZmlsdGVyaW5nLgogICMKICAjIFRoZXNlIHZhcmlhYmxlcyBjb3JyZXNwb25kIHRvIHRoZSBsYXN0IGxpbmUgb2YgdGhlIG91dHB1dCBvZiBgdG9kby5zaCAtcCBsc2A6CiAgIwogICMgICBUT0RPOiAyNCBvZiA0MiB0YXNrcyBzaG93bgogICMKICAjIEhlcmUgMjQgaXMgUDlLX1RPRE9fRklMVEVSRURfVEFTS19DT1VOVCBhbmQgNDIgaXMgUDlLX1RPRE9fVE9UQUxfVEFTS19DT1VOVC4KICAjCiAgIyB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19UT0RPX0NPTlRFTlRfRVhQQU5TSU9OPSckUDlLX1RPRE9fRklMVEVSRURfVEFTS19DT1VOVCcKCiAgIyBDdXN0b20gaWNvbi4KICAjIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX1RPRE9fVklTVUFMX0lERU5USUZJRVJfRVhQQU5TSU9OPSfirZAnCgogICMjIyMjIyMjIyMjWyB0aW1ld2FycmlvcjogdGltZXdhcnJpb3IgdHJhY2tpbmcgc3RhdHVzIChodHRwczovL3RpbWV3YXJyaW9yLm5ldC8pIF0jIyMjIyMjIyMjIyMKICAjIFRpbWV3YXJyaW9yIGNvbG9yLgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX1RJTUVXQVJSSU9SX0ZPUkVHUk9VTkQ9MTEwCiAgIyBJZiB0aGUgdHJhY2tlZCB0YXNrIGlzIGxvbmdlciB0aGFuIDI0IGNoYXJhY3RlcnMsIHRydW5jYXRlIGFuZCBhcHBlbmQgIuKApiIuCiAgIyBUaXA6IFRvIGFsd2F5cyBkaXNwbGF5IHRhc2tzIHdpdGhvdXQgdHJ1bmNhdGlvbiwgZGVsZXRlIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVyLgogICMgVGlwOiBUbyBoaWRlIHRhc2sgbmFtZXMgYW5kIGRpc3BsYXkganVzdCB0aGUgaWNvbiB3aGVuIHRpbWUgdHJhY2tpbmcgaXMgZW5hYmxlZCwgc2V0IHRoZQogICMgdmFsdWUgb2YgdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXIgdG8gIiIuCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfVElNRVdBUlJJT1JfQ09OVEVOVF9FWFBBTlNJT049JyR7UDlLX0NPTlRFTlQ6MDoyNH0keyR7UDlLX0NPTlRFTlQ6MjR9OivigKZ9JwoKICAjIEN1c3RvbSBpY29uLgogICMgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfVElNRVdBUlJJT1JfVklTVUFMX0lERU5USUZJRVJfRVhQQU5TSU9OPSfirZAnCgogICMjIyMjIyMjIyMjIyMjWyB0YXNrd2FycmlvcjogdGFza3dhcnJpb3IgdGFzayBjb3VudCAoaHR0cHM6Ly90YXNrd2Fycmlvci5vcmcvKSBdIyMjIyMjIyMjIyMjIyMKICAjIFRhc2t3YXJyaW9yIGNvbG9yLgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX1RBU0tXQVJSSU9SX0ZPUkVHUk9VTkQ9NzQKCiAgIyBUYXNrd2FycmlvciBzZWdtZW50IGZvcm1hdC4gVGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzIGFyZSBhdmFpbGFibGUgd2l0aGluIHRoZSBleHBhbnNpb24uCiAgIwogICMgLSBQOUtfVEFTS1dBUlJJT1JfUEVORElOR19DT1VOVCAgIFRoZSBudW1iZXIgb2YgcGVuZGluZyB0YXNrczogYHRhc2sgK1BFTkRJTkcgY291bnRgLgogICMgLSBQOUtfVEFTS1dBUlJJT1JfT1ZFUkRVRV9DT1VOVCAgIFRoZSBudW1iZXIgb2Ygb3ZlcmR1ZSB0YXNrczogYHRhc2sgK09WRVJEVUUgY291bnRgLgogICMKICAjIFplcm8gdmFsdWVzIGFyZSByZXByZXNlbnRlZCBhcyBlbXB0eSBwYXJhbWV0ZXJzLgogICMKICAjIFRoZSBkZWZhdWx0IGZvcm1hdDoKICAjCiAgIyAgICcke1A5S19UQVNLV0FSUklPUl9PVkVSRFVFX0NPVU5UOisiISRQOUtfVEFTS1dBUlJJT1JfT1ZFUkRVRV9DT1VOVC8ifSRQOUtfVEFTS1dBUlJJT1JfUEVORElOR19DT1VOVCcKICAjCiAgIyB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19UQVNLV0FSUklPUl9DT05URU5UX0VYUEFOU0lPTj0nJFA5S19UQVNLV0FSUklPUl9QRU5ESU5HX0NPVU5UJwoKICAjIEN1c3RvbSBpY29uLgogICMgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfVEFTS1dBUlJJT1JfVklTVUFMX0lERU5USUZJRVJfRVhQQU5TSU9OPSfirZAnCgogICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNbIGNvbnRleHQ6IHVzZXJAaG9zdG5hbWUgXSMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAjIENvbnRleHQgY29sb3Igd2hlbiBydW5uaW5nIHdpdGggcHJpdmlsZWdlcy4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19DT05URVhUX1JPT1RfRk9SRUdST1VORD0xNzgKICAjIENvbnRleHQgY29sb3IgaW4gU1NIIHdpdGhvdXQgcHJpdmlsZWdlcy4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19DT05URVhUX3tSRU1PVEUsUkVNT1RFX1NVRE99X0ZPUkVHUk9VTkQ9MTgwCiAgIyBEZWZhdWx0IGNvbnRleHQgY29sb3IgKG5vIHByaXZpbGVnZXMsIG5vIFNTSCkuCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfQ09OVEVYVF9GT1JFR1JPVU5EPTE4MAoKICAjIENvbnRleHQgZm9ybWF0IHdoZW4gcnVubmluZyB3aXRoIHByaXZpbGVnZXM6IGJvbGQgdXNlckBob3N0bmFtZS4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19DT05URVhUX1JPT1RfVEVNUExBVEU9JycKICAjIENvbnRleHQgZm9ybWF0IHdoZW4gaW4gU1NIIHdpdGhvdXQgcHJpdmlsZWdlczogdXNlckBob3N0bmFtZS4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19DT05URVhUX3tSRU1PVEUsUkVNT1RFX1NVRE99X1RFTVBMQVRFPScnCiAgIyBEZWZhdWx0IGNvbnRleHQgZm9ybWF0IChubyBwcml2aWxlZ2VzLCBubyBTU0gpOiB1c2VyQGhvc3RuYW1lLgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0NPTlRFWFRfVEVNUExBVEU9JycKCiAgIyBEb24ndCBzaG93IGNvbnRleHQgdW5sZXNzIHJ1bm5pbmcgd2l0aCBwcml2aWxlZ2VzIG9yIGluIFNTSC4KICAjIFRpcDogUmVtb3ZlIHRoZSBuZXh0IGxpbmUgdG8gYWx3YXlzIHNob3cgY29udGV4dC4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19DT05URVhUX3tERUZBVUxULFNVRE99X3tDT05URU5ULFZJU1VBTF9JREVOVElGSUVSfV9FWFBBTlNJT049CgogICMgQ3VzdG9tIGljb24uCiAgIyB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19DT05URVhUX1ZJU1VBTF9JREVOVElGSUVSX0VYUEFOU0lPTj0n4q2QJwogICMgQ3VzdG9tIHByZWZpeC4KICAjIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0NPTlRFWFRfUFJFRklYPSclMjQ4RndpdGggJwoKICAjIyNbIHZpcnR1YWxlbnY6IHB5dGhvbiB2aXJ0dWFsIGVudmlyb25tZW50IChodHRwczovL2RvY3MucHl0aG9uLm9yZy8zL2xpYnJhcnkvdmVudi5odG1sKSBdIyMjCiAgIyBQeXRob24gdmlydHVhbCBlbnZpcm9ubWVudCBjb2xvci4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19WSVJUVUFMRU5WX0ZPUkVHUk9VTkQ9MzcKICAjIERvbid0IHNob3cgUHl0aG9uIHZlcnNpb24gbmV4dCB0byB0aGUgdmlydHVhbCBlbnZpcm9ubWVudCBuYW1lLgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX1ZJUlRVQUxFTlZfU0hPV19QWVRIT05fVkVSU0lPTj1mYWxzZQogICMgSWYgc2V0IHRvICJmYWxzZSIsIHdvbid0IHNob3cgdmlydHVhbGVudiBpZiBweWVudiBpcyBhbHJlYWR5IHNob3duLgogICMgSWYgc2V0IHRvICJpZi1kaWZmZXJlbnQiLCB3b24ndCBzaG93IHZpcnR1YWxlbnYgaWYgaXQncyB0aGUgc2FtZSBhcyBweWVudi4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19WSVJUVUFMRU5WX1NIT1dfV0lUSF9QWUVOVj1mYWxzZQogICMgU2VwYXJhdGUgZW52aXJvbm1lbnQgbmFtZSBmcm9tIFB5dGhvbiB2ZXJzaW9uIG9ubHkgd2l0aCBhIHNwYWNlLgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX1ZJUlRVQUxFTlZfe0xFRlQsUklHSFR9X0RFTElNSVRFUj0KICAjIEN1c3RvbSBpY29uLgogICMgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfVklSVFVBTEVOVl9WSVNVQUxfSURFTlRJRklFUl9FWFBBTlNJT049J+KtkCcKCiAgIyMjIyMjIyMjIyMjIyMjIyMjIyMjWyBhbmFjb25kYTogY29uZGEgZW52aXJvbm1lbnQgKGh0dHBzOi8vY29uZGEuaW8vKSBdIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICMgQW5hY29uZGEgZW52aXJvbm1lbnQgY29sb3IuCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfQU5BQ09OREFfRk9SRUdST1VORD0zNwoKICAjIEFuYWNvbmRhIHNlZ21lbnQgZm9ybWF0LiBUaGUgZm9sbG93aW5nIHBhcmFtZXRlcnMgYXJlIGF2YWlsYWJsZSB3aXRoaW4gdGhlIGV4cGFuc2lvbi4KICAjCiAgIyAtIENPTkRBX1BSRUZJWCAgICAgICAgICAgICAgICAgQWJzb2x1dGUgcGF0aCB0byB0aGUgYWN0aXZlIEFuYWNvbmRhL01pbmljb25kYSBlbnZpcm9ubWVudC4KICAjIC0gQ09OREFfREVGQVVMVF9FTlYgICAgICAgICAgICBOYW1lIG9mIHRoZSBhY3RpdmUgQW5hY29uZGEvTWluaWNvbmRhIGVudmlyb25tZW50LgogICMgLSBDT05EQV9QUk9NUFRfTU9ESUZJRVIgICAgICAgIENvbmZpZ3VyYWJsZSBwcm9tcHQgbW9kaWZpZXIgKHNlZSBiZWxvdykuCiAgIyAtIFA5S19BTkFDT05EQV9QWVRIT05fVkVSU0lPTiAgQ3VycmVudCBweXRob24gdmVyc2lvbiAocHl0aG9uIC0tdmVyc2lvbikuCiAgIwogICMgQ09OREFfUFJPTVBUX01PRElGSUVSIGNhbiBiZSBjb25maWd1cmVkIHdpdGggdGhlIGZvbGxvd2luZyBjb21tYW5kOgogICMKICAjICAgY29uZGEgY29uZmlnIC0tc2V0IGVudl9wcm9tcHQgJyh7ZGVmYXVsdF9lbnZ9KSAnCiAgIwogICMgVGhlIGxhc3QgYXJndW1lbnQgaXMgYSBQeXRob24gZm9ybWF0IHN0cmluZyB0aGF0IGNhbiB1c2UgdGhlIGZvbGxvd2luZyB2YXJpYWJsZXM6CiAgIwogICMgLSBwcmVmaXggICAgICAgVGhlIHNhbWUgYXMgQ09OREFfUFJFRklYLgogICMgLSBkZWZhdWx0X2VudiAgVGhlIHNhbWUgYXMgQ09OREFfREVGQVVMVF9FTlYuCiAgIyAtIG5hbWUgICAgICAgICBUaGUgbGFzdCBzZWdtZW50IG9mIENPTkRBX1BSRUZJWC4KICAjIC0gc3RhY2tlZF9lbnYgIENvbW1hLXNlcGFyYXRlZCBsaXN0IG9mIG5hbWVzIGluIHRoZSBlbnZpcm9ubWVudCBzdGFjay4gVGhlIGZpcnN0IGVsZW1lbnQgaXMKICAjICAgICAgICAgICAgICAgIGFsd2F5cyB0aGUgc2FtZSBhcyBkZWZhdWx0X2Vudi4KICAjCiAgIyBOb3RlOiAnKHtkZWZhdWx0X2Vudn0pICcgaXMgdGhlIGRlZmF1bHQgdmFsdWUgb2YgZW52X3Byb21wdC4KICAjCiAgIyBUaGUgZGVmYXVsdCB2YWx1ZSBvZiBQT1dFUkxFVkVMOUtfQU5BQ09OREFfQ09OVEVOVF9FWFBBTlNJT04gZXhwYW5kcyB0byAkQ09OREFfUFJPTVBUX01PRElGSUVSCiAgIyB3aXRob3V0IHRoZSBzdXJyb3VuZGluZyBwYXJlbnRoZXNlcywgb3IgdG8gdGhlIGxhc3QgcGF0aCBjb21wb25lbnQgb2YgQ09OREFfUFJFRklYIGlmIHRoZSBmb3JtZXIKICAjIGlzIGVtcHR5LgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0FOQUNPTkRBX0NPTlRFTlRfRVhQQU5TSU9OPSckeyR7JHske0NPTkRBX1BST01QVF9NT0RJRklFUiNcKH0lIH0lXCl9Oi0ke0NPTkRBX1BSRUZJWDp0fX0nCgogICMgQ3VzdG9tIGljb24uCiAgIyB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19BTkFDT05EQV9WSVNVQUxfSURFTlRJRklFUl9FWFBBTlNJT049J+KtkCcKCiAgIyMjIyMjIyMjIyMjIyMjI1sgcHllbnY6IHB5dGhvbiBlbnZpcm9ubWVudCAoaHR0cHM6Ly9naXRodWIuY29tL3B5ZW52L3B5ZW52KSBdIyMjIyMjIyMjIyMjIyMjIwogICMgUHllbnYgY29sb3IuCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfUFlFTlZfRk9SRUdST1VORD0zNwogICMgSGlkZSBweXRob24gdmVyc2lvbiBpZiBpdCBkb2Vzbid0IGNvbWUgZnJvbSBvbmUgb2YgdGhlc2Ugc291cmNlcy4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19QWUVOVl9TT1VSQ0VTPShzaGVsbCBsb2NhbCBnbG9iYWwpCiAgIyBJZiBzZXQgdG8gZmFsc2UsIGhpZGUgcHl0aG9uIHZlcnNpb24gaWYgaXQncyB0aGUgc2FtZSBhcyBnbG9iYWw6CiAgIyAkKHB5ZW52IHZlcnNpb24tbmFtZSkgPT0gJChweWVudiBnbG9iYWwpLgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX1BZRU5WX1BST01QVF9BTFdBWVNfU0hPVz1mYWxzZQogICMgSWYgc2V0IHRvIGZhbHNlLCBoaWRlIHB5dGhvbiB2ZXJzaW9uIGlmIGl0J3MgZXF1YWwgdG8gInN5c3RlbSIuCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfUFlFTlZfU0hPV19TWVNURU09dHJ1ZQoKICAjIFB5ZW52IHNlZ21lbnQgZm9ybWF0LiBUaGUgZm9sbG93aW5nIHBhcmFtZXRlcnMgYXJlIGF2YWlsYWJsZSB3aXRoaW4gdGhlIGV4cGFuc2lvbi4KICAjCiAgIyAtIFA5S19DT05URU5UICAgICAgICAgICAgICAgIEN1cnJlbnQgcHllbnYgZW52aXJvbm1lbnQgKHB5ZW52IHZlcnNpb24tbmFtZSkuCiAgIyAtIFA5S19QWUVOVl9QWVRIT05fVkVSU0lPTiAgIEN1cnJlbnQgcHl0aG9uIHZlcnNpb24gKHB5dGhvbiAtLXZlcnNpb24pLgogICMKICAjIFRoZSBkZWZhdWx0IGZvcm1hdCBoYXMgdGhlIGZvbGxvd2luZyBsb2dpYzoKICAjCiAgIyAxLiBEaXNwbGF5ICIkUDlLX0NPTlRFTlQgJFA5S19QWUVOVl9QWVRIT05fVkVSU0lPTiIgaWYgJFA5S19QWUVOVl9QWVRIT05fVkVSU0lPTiBpcyBub3QKICAjICAgZW1wdHkgYW5kIHVuZXF1YWwgdG8gJFA5S19DT05URU5ULgogICMgMi4gT3RoZXJ3aXNlIGRpc3BsYXkganVzdCAiJFA5S19DT05URU5UIi4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19QWUVOVl9DT05URU5UX0VYUEFOU0lPTj0nJHtQOUtfQ09OVEVOVH0keyR7UDlLX1BZRU5WX1BZVEhPTl9WRVJTSU9OOiMkUDlLX0NPTlRFTlR9OisgJFA5S19QWUVOVl9QWVRIT05fVkVSU0lPTn0nCgogICMgQ3VzdG9tIGljb24uCiAgIyB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19QWUVOVl9WSVNVQUxfSURFTlRJRklFUl9FWFBBTlNJT049J+KtkCcKCiAgIyMjIyMjIyMjIyMjIyMjI1sgZ29lbnY6IGdvIGVudmlyb25tZW50IChodHRwczovL2dpdGh1Yi5jb20vc3luZGJnL2dvZW52KSBdIyMjIyMjIyMjIyMjIyMjIwogICMgR29lbnYgY29sb3IuCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfR09FTlZfRk9SRUdST1VORD0zNwogICMgSGlkZSBnbyB2ZXJzaW9uIGlmIGl0IGRvZXNuJ3QgY29tZSBmcm9tIG9uZSBvZiB0aGVzZSBzb3VyY2VzLgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0dPRU5WX1NPVVJDRVM9KHNoZWxsIGxvY2FsIGdsb2JhbCkKICAjIElmIHNldCB0byBmYWxzZSwgaGlkZSBnbyB2ZXJzaW9uIGlmIGl0J3MgdGhlIHNhbWUgYXMgZ2xvYmFsOgogICMgJChnb2VudiB2ZXJzaW9uLW5hbWUpID09ICQoZ29lbnYgZ2xvYmFsKS4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19HT0VOVl9QUk9NUFRfQUxXQVlTX1NIT1c9ZmFsc2UKICAjIElmIHNldCB0byBmYWxzZSwgaGlkZSBnbyB2ZXJzaW9uIGlmIGl0J3MgZXF1YWwgdG8gInN5c3RlbSIuCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfR09FTlZfU0hPV19TWVNURU09dHJ1ZQogICMgQ3VzdG9tIGljb24uCiAgIyB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19HT0VOVl9WSVNVQUxfSURFTlRJRklFUl9FWFBBTlNJT049J+KtkCcKCiAgIyMjIyMjIyMjI1sgbm9kZW52OiBub2RlLmpzIHZlcnNpb24gZnJvbSBub2RlbnYgKGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlbnYvbm9kZW52KSBdIyMjIyMjIyMjIwogICMgTm9kZW52IGNvbG9yLgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX05PREVOVl9GT1JFR1JPVU5EPTcwCiAgIyBIaWRlIG5vZGUgdmVyc2lvbiBpZiBpdCBkb2Vzbid0IGNvbWUgZnJvbSBvbmUgb2YgdGhlc2Ugc291cmNlcy4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19OT0RFTlZfU09VUkNFUz0oc2hlbGwgbG9jYWwgZ2xvYmFsKQogICMgSWYgc2V0IHRvIGZhbHNlLCBoaWRlIG5vZGUgdmVyc2lvbiBpZiBpdCdzIHRoZSBzYW1lIGFzIGdsb2JhbDoKICAjICQobm9kZW52IHZlcnNpb24tbmFtZSkgPT0gJChub2RlbnYgZ2xvYmFsKS4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19OT0RFTlZfUFJPTVBUX0FMV0FZU19TSE9XPWZhbHNlCiAgIyBJZiBzZXQgdG8gZmFsc2UsIGhpZGUgbm9kZSB2ZXJzaW9uIGlmIGl0J3MgZXF1YWwgdG8gInN5c3RlbSIuCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfTk9ERU5WX1NIT1dfU1lTVEVNPXRydWUKICAjIEN1c3RvbSBpY29uLgogICMgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfTk9ERU5WX1ZJU1VBTF9JREVOVElGSUVSX0VYUEFOU0lPTj0n4q2QJwoKICAjIyMjIyMjIyMjIyMjI1sgbnZtOiBub2RlLmpzIHZlcnNpb24gZnJvbSBudm0gKGh0dHBzOi8vZ2l0aHViLmNvbS9udm0tc2gvbnZtKSBdIyMjIyMjIyMjIyMjIyMjCiAgIyBOdm0gY29sb3IuCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfTlZNX0ZPUkVHUk9VTkQ9NzAKICAjIEN1c3RvbSBpY29uLgogICMgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfTlZNX1ZJU1VBTF9JREVOVElGSUVSX0VYUEFOU0lPTj0n4q2QJwoKICAjIyMjIyMjIyMjIyNbIG5vZGVlbnY6IG5vZGUuanMgZW52aXJvbm1lbnQgKGh0dHBzOi8vZ2l0aHViLmNvbS9la2FsaW5pbi9ub2RlZW52KSBdIyMjIyMjIyMjIyMjCiAgIyBOb2RlZW52IGNvbG9yLgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX05PREVFTlZfRk9SRUdST1VORD03MAogICMgRG9uJ3Qgc2hvdyBOb2RlIHZlcnNpb24gbmV4dCB0byB0aGUgZW52aXJvbm1lbnQgbmFtZS4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19OT0RFRU5WX1NIT1dfTk9ERV9WRVJTSU9OPWZhbHNlCiAgIyBTZXBhcmF0ZSBlbnZpcm9ubWVudCBuYW1lIGZyb20gTm9kZSB2ZXJzaW9uIG9ubHkgd2l0aCBhIHNwYWNlLgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX05PREVFTlZfe0xFRlQsUklHSFR9X0RFTElNSVRFUj0KICAjIEN1c3RvbSBpY29uLgogICMgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfTk9ERUVOVl9WSVNVQUxfSURFTlRJRklFUl9FWFBBTlNJT049J+KtkCcKCiAgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjWyBub2RlX3ZlcnNpb246IG5vZGUuanMgdmVyc2lvbiBdIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICMgTm9kZSB2ZXJzaW9uIGNvbG9yLgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX05PREVfVkVSU0lPTl9GT1JFR1JPVU5EPTcwCiAgIyBTaG93IG5vZGUgdmVyc2lvbiBvbmx5IHdoZW4gaW4gYSBkaXJlY3RvcnkgdHJlZSBjb250YWluaW5nIHBhY2thZ2UuanNvbi4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19OT0RFX1ZFUlNJT05fUFJPSkVDVF9PTkxZPXRydWUKICAjIEN1c3RvbSBpY29uLgogICMgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfTk9ERV9WRVJTSU9OX1ZJU1VBTF9JREVOVElGSUVSX0VYUEFOU0lPTj0n4q2QJwoKICAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1sgZ29fdmVyc2lvbjogZ28gdmVyc2lvbiAoaHR0cHM6Ly9nb2xhbmcub3JnKSBdIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgIyBHbyB2ZXJzaW9uIGNvbG9yLgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0dPX1ZFUlNJT05fRk9SRUdST1VORD0zNwogICMgU2hvdyBnbyB2ZXJzaW9uIG9ubHkgd2hlbiBpbiBhIGdvIHByb2plY3Qgc3ViZGlyZWN0b3J5LgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0dPX1ZFUlNJT05fUFJPSkVDVF9PTkxZPXRydWUKICAjIEN1c3RvbSBpY29uLgogICMgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfR09fVkVSU0lPTl9WSVNVQUxfSURFTlRJRklFUl9FWFBBTlNJT049J+KtkCcKCiAgIyMjIyMjIyMjIyMjIyMjIyNbIHJ1c3RfdmVyc2lvbjogcnVzdGMgdmVyc2lvbiAoaHR0cHM6Ly93d3cucnVzdC1sYW5nLm9yZykgXSMjIyMjIyMjIyMjIyMjIyMjIwogICMgUnVzdCB2ZXJzaW9uIGNvbG9yLgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX1JVU1RfVkVSU0lPTl9GT1JFR1JPVU5EPTM3CiAgIyBTaG93IHJ1c3QgdmVyc2lvbiBvbmx5IHdoZW4gaW4gYSBydXN0IHByb2plY3Qgc3ViZGlyZWN0b3J5LgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX1JVU1RfVkVSU0lPTl9QUk9KRUNUX09OTFk9dHJ1ZQogICMgQ3VzdG9tIGljb24uCiAgIyB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19SVVNUX1ZFUlNJT05fVklTVUFMX0lERU5USUZJRVJfRVhQQU5TSU9OPSfirZAnCgogICMjIyMjIyMjIyMjIyMjI1sgZG90bmV0X3ZlcnNpb246IC5ORVQgdmVyc2lvbiAoaHR0cHM6Ly9kb3RuZXQubWljcm9zb2Z0LmNvbSkgXSMjIyMjIyMjIyMjIyMjIyMKICAjIC5ORVQgdmVyc2lvbiBjb2xvci4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19ET1RORVRfVkVSU0lPTl9GT1JFR1JPVU5EPTEzNAogICMgU2hvdyAuTkVUIHZlcnNpb24gb25seSB3aGVuIGluIGEgLk5FVCBwcm9qZWN0IHN1YmRpcmVjdG9yeS4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19ET1RORVRfVkVSU0lPTl9QUk9KRUNUX09OTFk9dHJ1ZQogICMgQ3VzdG9tIGljb24uCiAgIyB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19ET1RORVRfVkVSU0lPTl9WSVNVQUxfSURFTlRJRklFUl9FWFBBTlNJT049J+KtkCcKCiAgIyMjIyMjIyMjIyMjIyMjIyMjIyMjWyBwaHBfdmVyc2lvbjogcGhwIHZlcnNpb24gKGh0dHBzOi8vd3d3LnBocC5uZXQvKSBdIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICMgUEhQIHZlcnNpb24gY29sb3IuCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfUEhQX1ZFUlNJT05fRk9SRUdST1VORD05OQogICMgU2hvdyBQSFAgdmVyc2lvbiBvbmx5IHdoZW4gaW4gYSBQSFAgcHJvamVjdCBzdWJkaXJlY3RvcnkuCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfUEhQX1ZFUlNJT05fUFJPSkVDVF9PTkxZPXRydWUKICAjIEN1c3RvbSBpY29uLgogICMgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfUEhQX1ZFUlNJT05fVklTVUFMX0lERU5USUZJRVJfRVhQQU5TSU9OPSfirZAnCgogICMjIyMjIyMjIyNbIGxhcmF2ZWxfdmVyc2lvbjogbGFyYXZlbCBwaHAgZnJhbWV3b3JrIHZlcnNpb24gKGh0dHBzOi8vbGFyYXZlbC5jb20vKSBdIyMjIyMjIyMjIyMKICAjIExhcmF2ZWwgdmVyc2lvbiBjb2xvci4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19MQVJBVkVMX1ZFUlNJT05fRk9SRUdST1VORD0xNjEKICAjIEN1c3RvbSBpY29uLgogICMgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfTEFSQVZFTF9WRVJTSU9OX1ZJU1VBTF9JREVOVElGSUVSX0VYUEFOU0lPTj0n4q2QJwoKICAjIyMjIyMjIyMjIyMjIyMjIyMjI1sgamF2YV92ZXJzaW9uOiBqYXZhIHZlcnNpb24gKGh0dHBzOi8vd3d3LmphdmEuY29tLykgXSMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgIyBKYXZhIHZlcnNpb24gY29sb3IuCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfSkFWQV9WRVJTSU9OX0ZPUkVHUk9VTkQ9MzIKICAjIFNob3cgamF2YSB2ZXJzaW9uIG9ubHkgd2hlbiBpbiBhIGphdmEgcHJvamVjdCBzdWJkaXJlY3RvcnkuCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfSkFWQV9WRVJTSU9OX1BST0pFQ1RfT05MWT10cnVlCiAgIyBTaG93IGJyaWVmIHZlcnNpb24uCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfSkFWQV9WRVJTSU9OX0ZVTEw9ZmFsc2UKICAjIEN1c3RvbSBpY29uLgogICMgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfSkFWQV9WRVJTSU9OX1ZJU1VBTF9JREVOVElGSUVSX0VYUEFOU0lPTj0n4q2QJwoKICAjIyNbIHBhY2thZ2U6IG5hbWVAdmVyc2lvbiBmcm9tIHBhY2thZ2UuanNvbiAoaHR0cHM6Ly9kb2NzLm5wbWpzLmNvbS9maWxlcy9wYWNrYWdlLmpzb24pIF0jIyMjCiAgIyBQYWNrYWdlIGNvbG9yLgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX1BBQ0tBR0VfRk9SRUdST1VORD0xMTcKICAjIFBhY2thZ2UgZm9ybWF0LiBUaGUgZm9sbG93aW5nIHBhcmFtZXRlcnMgYXJlIGF2YWlsYWJsZSB3aXRoaW4gdGhlIGV4cGFuc2lvbi4KICAjCiAgIyAtIFA5S19QQUNLQUdFX05BTUUgICAgIFRoZSB2YWx1ZSBvZiBgbmFtZWAgZmllbGQgaW4gcGFja2FnZS5qc29uLgogICMgLSBQOUtfUEFDS0FHRV9WRVJTSU9OICBUaGUgdmFsdWUgb2YgYHZlcnNpb25gIGZpZWxkIGluIHBhY2thZ2UuanNvbi4KICAjCiAgIyB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19QQUNLQUdFX0NPTlRFTlRfRVhQQU5TSU9OPScke1A5S19QQUNLQUdFX05BTUUvL1wlLyUlfUAke1A5S19QQUNLQUdFX1ZFUlNJT04vL1wlLyUlfScKICAjIEN1c3RvbSBpY29uLgogICMgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfUEFDS0FHRV9WSVNVQUxfSURFTlRJRklFUl9FWFBBTlNJT049J+KtkCcKCiAgIyMjIyMjIyMjIyMjI1sgcmJlbnY6IHJ1YnkgdmVyc2lvbiBmcm9tIHJiZW52IChodHRwczovL2dpdGh1Yi5jb20vcmJlbnYvcmJlbnYpIF0jIyMjIyMjIyMjIyMjIwogICMgUmJlbnYgY29sb3IuCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfUkJFTlZfRk9SRUdST1VORD0xNjgKICAjIEhpZGUgcnVieSB2ZXJzaW9uIGlmIGl0IGRvZXNuJ3QgY29tZSBmcm9tIG9uZSBvZiB0aGVzZSBzb3VyY2VzLgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX1JCRU5WX1NPVVJDRVM9KHNoZWxsIGxvY2FsIGdsb2JhbCkKICAjIElmIHNldCB0byBmYWxzZSwgaGlkZSBydWJ5IHZlcnNpb24gaWYgaXQncyB0aGUgc2FtZSBhcyBnbG9iYWw6CiAgIyAkKHJiZW52IHZlcnNpb24tbmFtZSkgPT0gJChyYmVudiBnbG9iYWwpLgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX1JCRU5WX1BST01QVF9BTFdBWVNfU0hPVz1mYWxzZQogICMgSWYgc2V0IHRvIGZhbHNlLCBoaWRlIHJ1YnkgdmVyc2lvbiBpZiBpdCdzIGVxdWFsIHRvICJzeXN0ZW0iLgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX1JCRU5WX1NIT1dfU1lTVEVNPXRydWUKICAjIEN1c3RvbSBpY29uLgogICMgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfUkJFTlZfVklTVUFMX0lERU5USUZJRVJfRVhQQU5TSU9OPSfirZAnCgogICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjWyBydm06IHJ1YnkgdmVyc2lvbiBmcm9tIHJ2bSAoaHR0cHM6Ly9ydm0uaW8pIF0jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAjIFJ2bSBjb2xvci4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19SVk1fRk9SRUdST1VORD0xNjgKICAjIERvbid0IHNob3cgQGdlbXNldCBhdCB0aGUgZW5kLgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX1JWTV9TSE9XX0dFTVNFVD1mYWxzZQogICMgRG9uJ3Qgc2hvdyBydWJ5LSBhdCB0aGUgZnJvbnQuCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfUlZNX1NIT1dfUFJFRklYPWZhbHNlCiAgIyBDdXN0b20gaWNvbi4KICAjIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX1JWTV9WSVNVQUxfSURFTlRJRklFUl9FWFBBTlNJT049J+KtkCcKCiAgIyMjIyMjIyMjIyNbIGZ2bTogZmx1dHRlciB2ZXJzaW9uIG1hbmFnZW1lbnQgKGh0dHBzOi8vZ2l0aHViLmNvbS9sZW9hZmFyaWFzL2Z2bSkgXSMjIyMjIyMjIyMjIwogICMgRnZtIGNvbG9yLgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0ZWTV9GT1JFR1JPVU5EPTM4CiAgIyBDdXN0b20gaWNvbi4KICAjIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0ZWTV9WSVNVQUxfSURFTlRJRklFUl9FWFBBTlNJT049J+KtkCcKCiAgIyMjIyMjIyMjI1sgbHVhZW52OiBsdWEgdmVyc2lvbiBmcm9tIGx1YWVudiAoaHR0cHM6Ly9naXRodWIuY29tL2NlaG9mZm1hbi9sdWFlbnYpIF0jIyMjIyMjIyMjIwogICMgTHVhIGNvbG9yLgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0xVQUVOVl9GT1JFR1JPVU5EPTMyCiAgIyBIaWRlIGx1YSB2ZXJzaW9uIGlmIGl0IGRvZXNuJ3QgY29tZSBmcm9tIG9uZSBvZiB0aGVzZSBzb3VyY2VzLgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0xVQUVOVl9TT1VSQ0VTPShzaGVsbCBsb2NhbCBnbG9iYWwpCiAgIyBJZiBzZXQgdG8gZmFsc2UsIGhpZGUgbHVhIHZlcnNpb24gaWYgaXQncyB0aGUgc2FtZSBhcyBnbG9iYWw6CiAgIyAkKGx1YWVudiB2ZXJzaW9uLW5hbWUpID09ICQobHVhZW52IGdsb2JhbCkuCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfTFVBRU5WX1BST01QVF9BTFdBWVNfU0hPVz1mYWxzZQogICMgSWYgc2V0IHRvIGZhbHNlLCBoaWRlIGx1YSB2ZXJzaW9uIGlmIGl0J3MgZXF1YWwgdG8gInN5c3RlbSIuCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfTFVBRU5WX1NIT1dfU1lTVEVNPXRydWUKICAjIEN1c3RvbSBpY29uLgogICMgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfTFVBRU5WX1ZJU1VBTF9JREVOVElGSUVSX0VYUEFOU0lPTj0n4q2QJwoKICAjIyMjIyMjIyMjIyMjIyNbIGplbnY6IGphdmEgdmVyc2lvbiBmcm9tIGplbnYgKGh0dHBzOi8vZ2l0aHViLmNvbS9qZW52L2plbnYpIF0jIyMjIyMjIyMjIyMjIyMjCiAgIyBKYXZhIGNvbG9yLgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0pFTlZfRk9SRUdST1VORD0zMgogICMgSGlkZSBqYXZhIHZlcnNpb24gaWYgaXQgZG9lc24ndCBjb21lIGZyb20gb25lIG9mIHRoZXNlIHNvdXJjZXMuCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfSkVOVl9TT1VSQ0VTPShzaGVsbCBsb2NhbCBnbG9iYWwpCiAgIyBJZiBzZXQgdG8gZmFsc2UsIGhpZGUgamF2YSB2ZXJzaW9uIGlmIGl0J3MgdGhlIHNhbWUgYXMgZ2xvYmFsOgogICMgJChqZW52IHZlcnNpb24tbmFtZSkgPT0gJChqZW52IGdsb2JhbCkuCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfSkVOVl9QUk9NUFRfQUxXQVlTX1NIT1c9ZmFsc2UKICAjIElmIHNldCB0byBmYWxzZSwgaGlkZSBqYXZhIHZlcnNpb24gaWYgaXQncyBlcXVhbCB0byAic3lzdGVtIi4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19KRU5WX1NIT1dfU1lTVEVNPXRydWUKICAjIEN1c3RvbSBpY29uLgogICMgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfSkVOVl9WSVNVQUxfSURFTlRJRklFUl9FWFBBTlNJT049J+KtkCcKCiAgIyMjIyMjIyMjIyNbIHBsZW52OiBwZXJsIHZlcnNpb24gZnJvbSBwbGVudiAoaHR0cHM6Ly9naXRodWIuY29tL3Rva3VoaXJvbS9wbGVudikgXSMjIyMjIyMjIyMjIwogICMgUGVybCBjb2xvci4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19QTEVOVl9GT1JFR1JPVU5EPTY3CiAgIyBIaWRlIHBlcmwgdmVyc2lvbiBpZiBpdCBkb2Vzbid0IGNvbWUgZnJvbSBvbmUgb2YgdGhlc2Ugc291cmNlcy4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19QTEVOVl9TT1VSQ0VTPShzaGVsbCBsb2NhbCBnbG9iYWwpCiAgIyBJZiBzZXQgdG8gZmFsc2UsIGhpZGUgcGVybCB2ZXJzaW9uIGlmIGl0J3MgdGhlIHNhbWUgYXMgZ2xvYmFsOgogICMgJChwbGVudiB2ZXJzaW9uLW5hbWUpID09ICQocGxlbnYgZ2xvYmFsKS4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19QTEVOVl9QUk9NUFRfQUxXQVlTX1NIT1c9ZmFsc2UKICAjIElmIHNldCB0byBmYWxzZSwgaGlkZSBwZXJsIHZlcnNpb24gaWYgaXQncyBlcXVhbCB0byAic3lzdGVtIi4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19QTEVOVl9TSE9XX1NZU1RFTT10cnVlCiAgIyBDdXN0b20gaWNvbi4KICAjIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX1BMRU5WX1ZJU1VBTF9JREVOVElGSUVSX0VYUEFOU0lPTj0n4q2QJwoKICAjIyMjIyMjIyMjIyNbIHBocGVudjogcGhwIHZlcnNpb24gZnJvbSBwaHBlbnYgKGh0dHBzOi8vZ2l0aHViLmNvbS9waHBlbnYvcGhwZW52KSBdIyMjIyMjIyMjIyMjCiAgIyBQSFAgY29sb3IuCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfUEhQRU5WX0ZPUkVHUk9VTkQ9OTkKICAjIEhpZGUgcGhwIHZlcnNpb24gaWYgaXQgZG9lc24ndCBjb21lIGZyb20gb25lIG9mIHRoZXNlIHNvdXJjZXMuCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfUEhQRU5WX1NPVVJDRVM9KHNoZWxsIGxvY2FsIGdsb2JhbCkKICAjIElmIHNldCB0byBmYWxzZSwgaGlkZSBwaHAgdmVyc2lvbiBpZiBpdCdzIHRoZSBzYW1lIGFzIGdsb2JhbDoKICAjICQocGhwZW52IHZlcnNpb24tbmFtZSkgPT0gJChwaHBlbnYgZ2xvYmFsKS4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19QSFBFTlZfUFJPTVBUX0FMV0FZU19TSE9XPWZhbHNlCiAgIyBJZiBzZXQgdG8gZmFsc2UsIGhpZGUgcGhwIHZlcnNpb24gaWYgaXQncyBlcXVhbCB0byAic3lzdGVtIi4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19QSFBFTlZfU0hPV19TWVNURU09dHJ1ZQogICMgQ3VzdG9tIGljb24uCiAgIyB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19QSFBFTlZfVklTVUFMX0lERU5USUZJRVJfRVhQQU5TSU9OPSfirZAnCgogICMjIyMjIyNbIHNjYWxhZW52OiBzY2FsYSB2ZXJzaW9uIGZyb20gc2NhbGFlbnYgKGh0dHBzOi8vZ2l0aHViLmNvbS9zY2FsYWVudi9zY2FsYWVudikgXSMjIyMjIyMKICAjIFNjYWxhIGNvbG9yLgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX1NDQUxBRU5WX0ZPUkVHUk9VTkQ9MTYwCiAgIyBIaWRlIHNjYWxhIHZlcnNpb24gaWYgaXQgZG9lc24ndCBjb21lIGZyb20gb25lIG9mIHRoZXNlIHNvdXJjZXMuCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfU0NBTEFFTlZfU09VUkNFUz0oc2hlbGwgbG9jYWwgZ2xvYmFsKQogICMgSWYgc2V0IHRvIGZhbHNlLCBoaWRlIHNjYWxhIHZlcnNpb24gaWYgaXQncyB0aGUgc2FtZSBhcyBnbG9iYWw6CiAgIyAkKHNjYWxhZW52IHZlcnNpb24tbmFtZSkgPT0gJChzY2FsYWVudiBnbG9iYWwpLgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX1NDQUxBRU5WX1BST01QVF9BTFdBWVNfU0hPVz1mYWxzZQogICMgSWYgc2V0IHRvIGZhbHNlLCBoaWRlIHNjYWxhIHZlcnNpb24gaWYgaXQncyBlcXVhbCB0byAic3lzdGVtIi4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19TQ0FMQUVOVl9TSE9XX1NZU1RFTT10cnVlCiAgIyBDdXN0b20gaWNvbi4KICAjIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX1NDQUxBRU5WX1ZJU1VBTF9JREVOVElGSUVSX0VYUEFOU0lPTj0n4q2QJwoKICAjIyMjIyMjIyMjWyBoYXNrZWxsX3N0YWNrOiBoYXNrZWxsIHZlcnNpb24gZnJvbSBzdGFjayAoaHR0cHM6Ly9oYXNrZWxsc3RhY2sub3JnLykgXSMjIyMjIyMjIyMjCiAgIyBIYXNrZWxsIGNvbG9yLgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0hBU0tFTExfU1RBQ0tfRk9SRUdST1VORD0xNzIKICAjIEhpZGUgaGFza2VsbCB2ZXJzaW9uIGlmIGl0IGRvZXNuJ3QgY29tZSBmcm9tIG9uZSBvZiB0aGVzZSBzb3VyY2VzLgogICMKICAjICAgc2hlbGw6ICB2ZXJzaW9uIGlzIHNldCBieSBTVEFDS19ZQU1MCiAgIyAgIGxvY2FsOiAgdmVyc2lvbiBpcyBzZXQgYnkgc3RhY2sueWFtbCB1cCB0aGUgZGlyZWN0b3J5IHRyZWUKICAjICAgZ2xvYmFsOiB2ZXJzaW9uIGlzIHNldCBieSB0aGUgaW1wbGljaXQgZ2xvYmFsIHByb2plY3QgKH4vLnN0YWNrL2dsb2JhbC1wcm9qZWN0L3N0YWNrLnlhbWwpCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfSEFTS0VMTF9TVEFDS19TT1VSQ0VTPShzaGVsbCBsb2NhbCkKICAjIElmIHNldCB0byBmYWxzZSwgaGlkZSBoYXNrZWxsIHZlcnNpb24gaWYgaXQncyB0aGUgc2FtZSBhcyBpbiB0aGUgaW1wbGljaXQgZ2xvYmFsIHByb2plY3QuCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfSEFTS0VMTF9TVEFDS19BTFdBWVNfU0hPVz10cnVlCiAgIyBDdXN0b20gaWNvbi4KICAjIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0hBU0tFTExfU1RBQ0tfVklTVUFMX0lERU5USUZJRVJfRVhQQU5TSU9OPSfirZAnCgogICMjIyMjIyMjIyMjIyMjIyNbIHRlcnJhZm9ybTogdGVycmFmb3JtIHdvcmtzcGFjZSAoaHR0cHM6Ly93d3cudGVycmFmb3JtLmlvKSBdIyMjIyMjIyMjIyMjIyMjIyMKICAjIERvbid0IHNob3cgdGVycmFmb3JtIHdvcmtzcGFjZSBpZiBpdCdzIGxpdGVyYWxseSAiZGVmYXVsdCIuCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfVEVSUkFGT1JNX1NIT1dfREVGQVVMVD1mYWxzZQogICMgUE9XRVJMRVZFTDlLX1RFUlJBRk9STV9DTEFTU0VTIGlzIGFuIGFycmF5IHdpdGggZXZlbiBudW1iZXIgb2YgZWxlbWVudHMuIFRoZSBmaXJzdCBlbGVtZW50CiAgIyBpbiBlYWNoIHBhaXIgZGVmaW5lcyBhIHBhdHRlcm4gYWdhaW5zdCB3aGljaCB0aGUgY3VycmVudCB0ZXJyYWZvcm0gd29ya3NwYWNlIGdldHMgbWF0Y2hlZC4KICAjIE1vcmUgc3BlY2lmaWNhbGx5LCBpdCdzIFA5S19DT05URU5UIHByaW9yIHRvIHRoZSBhcHBsaWNhdGlvbiBvZiBjb250ZXh0IGV4cGFuc2lvbiAoc2VlIGJlbG93KQogICMgdGhhdCBnZXRzIG1hdGNoZWQuIElmIHlvdSB1bnNldCBhbGwgUE9XRVJMRVZFTDlLX1RFUlJBRk9STV8qQ09OVEVOVF9FWFBBTlNJT04gcGFyYW1ldGVycywKICAjIHlvdSdsbCBzZWUgdGhpcyB2YWx1ZSBpbiB5b3VyIHByb21wdC4gVGhlIHNlY29uZCBlbGVtZW50IG9mIGVhY2ggcGFpciBpbgogICMgUE9XRVJMRVZFTDlLX1RFUlJBRk9STV9DTEFTU0VTIGRlZmluZXMgdGhlIHdvcmtzcGFjZSBjbGFzcy4gUGF0dGVybnMgYXJlIHRyaWVkIGluIG9yZGVyLiBUaGUKICAjIGZpcnN0IG1hdGNoIHdpbnMuCiAgIwogICMgRm9yIGV4YW1wbGUsIGdpdmVuIHRoZXNlIHNldHRpbmdzOgogICMKICAjICAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfVEVSUkFGT1JNX0NMQVNTRVM9KAogICMgICAgICcqcHJvZConICBQUk9ECiAgIyAgICAgJyp0ZXN0KicgIFRFU1QKICAjICAgICAnKicgICAgICAgT1RIRVIpCiAgIwogICMgSWYgeW91ciBjdXJyZW50IHRlcnJhZm9ybSB3b3Jrc3BhY2UgaXMgInByb2plY3RfdGVzdCIsIGl0cyBjbGFzcyBpcyBURVNUIGJlY2F1c2UgInByb2plY3RfdGVzdCIKICAjIGRvZXNuJ3QgbWF0Y2ggdGhlIHBhdHRlcm4gJypwcm9kKicgYnV0IGRvZXMgbWF0Y2ggJyp0ZXN0KicuCiAgIwogICMgWW91IGNhbiBkZWZpbmUgZGlmZmVyZW50IGNvbG9ycywgaWNvbnMgYW5kIGNvbnRlbnQgZXhwYW5zaW9ucyBmb3IgZGlmZmVyZW50IGNsYXNzZXM6CiAgIwogICMgICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19URVJSQUZPUk1fVEVTVF9GT1JFR1JPVU5EPTI4CiAgIyAgIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX1RFUlJBRk9STV9URVNUX1ZJU1VBTF9JREVOVElGSUVSX0VYUEFOU0lPTj0n4q2QJwogICMgICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19URVJSQUZPUk1fVEVTVF9DT05URU5UX0VYUEFOU0lPTj0nPiAke1A5S19DT05URU5UfSA8JwogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX1RFUlJBRk9STV9DTEFTU0VTPSgKICAgICAgIyAnKnByb2QqJyAgUFJPRCAgICAjIFRoZXNlIHZhbHVlcyBhcmUgZXhhbXBsZXMgdGhhdCBhcmUgdW5saWtlbHkKICAgICAgIyAnKnRlc3QqJyAgVEVTVCAgICAjIHRvIG1hdGNoIHlvdXIgbmVlZHMuIEN1c3RvbWl6ZSB0aGVtIGFzIG5lZWRlZC4KICAgICAgJyonICAgICAgICAgT1RIRVIpCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfVEVSUkFGT1JNX09USEVSX0ZPUkVHUk9VTkQ9MzgKICAjIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX1RFUlJBRk9STV9PVEhFUl9WSVNVQUxfSURFTlRJRklFUl9FWFBBTlNJT049J+KtkCcKCiAgIyMjIyMjIyMjIyMjI1sga3ViZWNvbnRleHQ6IGN1cnJlbnQga3ViZXJuZXRlcyBjb250ZXh0IChodHRwczovL2t1YmVybmV0ZXMuaW8vKSBdIyMjIyMjIyMjIyMjIwogICMgU2hvdyBrdWJlY29udGV4dCBvbmx5IHdoZW4gdGhlIHRoZSBjb21tYW5kIHlvdSBhcmUgdHlwaW5nIGludm9rZXMgb25lIG9mIHRoZXNlIHRvb2xzLgogICMgVGlwOiBSZW1vdmUgdGhlIG5leHQgbGluZSB0byBhbHdheXMgc2hvdyBrdWJlY29udGV4dC4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19LVUJFQ09OVEVYVF9TSE9XX09OX0NPTU1BTkQ9J2t1YmVjdGx8aGVsbXxrdWJlbnN8a3ViZWN0eHxvY3xpc3Rpb2N0bHxrb2dpdG98azlzfGhlbG1maWxlJwoKICAjIEt1YmVybmV0ZXMgY29udGV4dCBjbGFzc2VzIGZvciB0aGUgcHVycG9zZSBvZiB1c2luZyBkaWZmZXJlbnQgY29sb3JzLCBpY29ucyBhbmQgZXhwYW5zaW9ucyB3aXRoCiAgIyBkaWZmZXJlbnQgY29udGV4dHMuCiAgIwogICMgUE9XRVJMRVZFTDlLX0tVQkVDT05URVhUX0NMQVNTRVMgaXMgYW4gYXJyYXkgd2l0aCBldmVuIG51bWJlciBvZiBlbGVtZW50cy4gVGhlIGZpcnN0IGVsZW1lbnQKICAjIGluIGVhY2ggcGFpciBkZWZpbmVzIGEgcGF0dGVybiBhZ2FpbnN0IHdoaWNoIHRoZSBjdXJyZW50IGt1YmVybmV0ZXMgY29udGV4dCBnZXRzIG1hdGNoZWQuCiAgIyBNb3JlIHNwZWNpZmljYWxseSwgaXQncyBQOUtfQ09OVEVOVCBwcmlvciB0byB0aGUgYXBwbGljYXRpb24gb2YgY29udGV4dCBleHBhbnNpb24gKHNlZSBiZWxvdykKICAjIHRoYXQgZ2V0cyBtYXRjaGVkLiBJZiB5b3UgdW5zZXQgYWxsIFBPV0VSTEVWRUw5S19LVUJFQ09OVEVYVF8qQ09OVEVOVF9FWFBBTlNJT04gcGFyYW1ldGVycywKICAjIHlvdSdsbCBzZWUgdGhpcyB2YWx1ZSBpbiB5b3VyIHByb21wdC4gVGhlIHNlY29uZCBlbGVtZW50IG9mIGVhY2ggcGFpciBpbgogICMgUE9XRVJMRVZFTDlLX0tVQkVDT05URVhUX0NMQVNTRVMgZGVmaW5lcyB0aGUgY29udGV4dCBjbGFzcy4gUGF0dGVybnMgYXJlIHRyaWVkIGluIG9yZGVyLiBUaGUKICAjIGZpcnN0IG1hdGNoIHdpbnMuCiAgIwogICMgRm9yIGV4YW1wbGUsIGdpdmVuIHRoZXNlIHNldHRpbmdzOgogICMKICAjICAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfS1VCRUNPTlRFWFRfQ0xBU1NFUz0oCiAgIyAgICAgJypwcm9kKicgIFBST0QKICAjICAgICAnKnRlc3QqJyAgVEVTVAogICMgICAgICcqJyAgICAgICBERUZBVUxUKQogICMKICAjIElmIHlvdXIgY3VycmVudCBrdWJlcm5ldGVzIGNvbnRleHQgaXMgImRlYXRocmF5LXRlc3RpbmcvZGVmYXVsdCIsIGl0cyBjbGFzcyBpcyBURVNUCiAgIyBiZWNhdXNlICJkZWF0aHJheS10ZXN0aW5nL2RlZmF1bHQiIGRvZXNuJ3QgbWF0Y2ggdGhlIHBhdHRlcm4gJypwcm9kKicgYnV0IGRvZXMgbWF0Y2ggJyp0ZXN0KicuCiAgIwogICMgWW91IGNhbiBkZWZpbmUgZGlmZmVyZW50IGNvbG9ycywgaWNvbnMgYW5kIGNvbnRlbnQgZXhwYW5zaW9ucyBmb3IgZGlmZmVyZW50IGNsYXNzZXM6CiAgIwogICMgICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19LVUJFQ09OVEVYVF9URVNUX0ZPUkVHUk9VTkQ9MjgKICAjICAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfS1VCRUNPTlRFWFRfVEVTVF9WSVNVQUxfSURFTlRJRklFUl9FWFBBTlNJT049J+KtkCcKICAjICAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfS1VCRUNPTlRFWFRfVEVTVF9DT05URU5UX0VYUEFOU0lPTj0nPiAke1A5S19DT05URU5UfSA8JwogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0tVQkVDT05URVhUX0NMQVNTRVM9KAogICAgICAjICcqcHJvZConICBQUk9EICAgICMgVGhlc2UgdmFsdWVzIGFyZSBleGFtcGxlcyB0aGF0IGFyZSB1bmxpa2VseQogICAgICAjICcqdGVzdConICBURVNUICAgICMgdG8gbWF0Y2ggeW91ciBuZWVkcy4gQ3VzdG9taXplIHRoZW0gYXMgbmVlZGVkLgogICAgICAnKicgICAgICAgREVGQVVMVCkKICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19LVUJFQ09OVEVYVF9ERUZBVUxUX0ZPUkVHUk9VTkQ9MTM0CiAgIyB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19LVUJFQ09OVEVYVF9ERUZBVUxUX1ZJU1VBTF9JREVOVElGSUVSX0VYUEFOU0lPTj0n4q2QJwoKICAjIFVzZSBQT1dFUkxFVkVMOUtfS1VCRUNPTlRFWFRfQ09OVEVOVF9FWFBBTlNJT04gdG8gc3BlY2lmeSB0aGUgY29udGVudCBkaXNwbGF5ZWQgYnkga3ViZWNvbnRleHQKICAjIHNlZ21lbnQuIFBhcmFtZXRlciBleHBhbnNpb25zIGFyZSB2ZXJ5IGZsZXhpYmxlIGFuZCBmYXN0LCB0b28uIFNlZSByZWZlcmVuY2U6CiAgIyBodHRwOi8venNoLnNvdXJjZWZvcmdlLm5ldC9Eb2MvUmVsZWFzZS9FeHBhbnNpb24uaHRtbCNQYXJhbWV0ZXItRXhwYW5zaW9uLgogICMKICAjIFdpdGhpbiB0aGUgZXhwYW5zaW9uIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVycyBhcmUgYWx3YXlzIGF2YWlsYWJsZToKICAjCiAgIyAtIFA5S19DT05URU5UICAgICAgICAgICAgICAgIFRoZSBjb250ZW50IHRoYXQgd291bGQndmUgYmVlbiBkaXNwbGF5ZWQgaWYgdGhlcmUgd2FzIG5vIGNvbnRlbnQKICAjICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwYW5zaW9uIGRlZmluZWQuCiAgIyAtIFA5S19LVUJFQ09OVEVYVF9OQU1FICAgICAgIFRoZSBjdXJyZW50IGNvbnRleHQncyBuYW1lLiBDb3JyZXNwb25kcyB0byBjb2x1bW4gTkFNRSBpbiB0aGUKICAjICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0IG9mIGBrdWJlY3RsIGNvbmZpZyBnZXQtY29udGV4dHNgLgogICMgLSBQOUtfS1VCRUNPTlRFWFRfQ0xVU1RFUiAgICBUaGUgY3VycmVudCBjb250ZXh0J3MgY2x1c3Rlci4gQ29ycmVzcG9uZHMgdG8gY29sdW1uIENMVVNURVIgaW4gdGhlCiAgIyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dCBvZiBga3ViZWN0bCBjb25maWcgZ2V0LWNvbnRleHRzYC4KICAjIC0gUDlLX0tVQkVDT05URVhUX05BTUVTUEFDRSAgVGhlIGN1cnJlbnQgY29udGV4dCdzIG5hbWVzcGFjZS4gQ29ycmVzcG9uZHMgdG8gY29sdW1uIE5BTUVTUEFDRQogICMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbiB0aGUgb3V0cHV0IG9mIGBrdWJlY3RsIGNvbmZpZyBnZXQtY29udGV4dHNgLiBJZiB0aGVyZSBpcyBubwogICMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lc3BhY2UsIHRoZSBwYXJhbWV0ZXIgaXMgc2V0IHRvICJkZWZhdWx0Ii4KICAjIC0gUDlLX0tVQkVDT05URVhUX1VTRVIgICAgICAgVGhlIGN1cnJlbnQgY29udGV4dCdzIHVzZXIuIENvcnJlc3BvbmRzIHRvIGNvbHVtbiBBVVRISU5GTyBpbiB0aGUKICAjICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0IG9mIGBrdWJlY3RsIGNvbmZpZyBnZXQtY29udGV4dHNgLgogICMKICAjIElmIHRoZSBjb250ZXh0IHBvaW50cyB0byBHb29nbGUgS3ViZXJuZXRlcyBFbmdpbmUgKEdLRSkgb3IgRWxhc3RpYyBLdWJlcm5ldGVzIFNlcnZpY2UgKEVLUyksCiAgIyB0aGUgZm9sbG93aW5nIGV4dHJhIHBhcmFtZXRlcnMgYXJlIGF2YWlsYWJsZToKICAjCiAgIyAtIFA5S19LVUJFQ09OVEVYVF9DTE9VRF9OQU1FICAgICBFaXRoZXIgImdrZSIgb3IgImVrcyIuCiAgIyAtIFA5S19LVUJFQ09OVEVYVF9DTE9VRF9BQ0NPVU5UICBBY2NvdW50L3Byb2plY3QgSUQuCiAgIyAtIFA5S19LVUJFQ09OVEVYVF9DTE9VRF9aT05FICAgICBBdmFpbGFiaWxpdHkgem9uZS4KICAjIC0gUDlLX0tVQkVDT05URVhUX0NMT1VEX0NMVVNURVIgIENsdXN0ZXIuCiAgIwogICMgUDlLX0tVQkVDT05URVhUX0NMT1VEXyogcGFyYW1ldGVycyBhcmUgZGVyaXZlZCBmcm9tIFA5S19LVUJFQ09OVEVYVF9DTFVTVEVSLiBGb3IgZXhhbXBsZSwKICAjIGlmIFA5S19LVUJFQ09OVEVYVF9DTFVTVEVSIGlzICJna2VfbXktYWNjb3VudF91cy1lYXN0MS1hX215LWNsdXN0ZXItMDEiOgogICMKICAjICAgLSBQOUtfS1VCRUNPTlRFWFRfQ0xPVURfTkFNRT1na2UKICAjICAgLSBQOUtfS1VCRUNPTlRFWFRfQ0xPVURfQUNDT1VOVD1teS1hY2NvdW50CiAgIyAgIC0gUDlLX0tVQkVDT05URVhUX0NMT1VEX1pPTkU9dXMtZWFzdDEtYQogICMgICAtIFA5S19LVUJFQ09OVEVYVF9DTE9VRF9DTFVTVEVSPW15LWNsdXN0ZXItMDEKICAjCiAgIyBJZiBQOUtfS1VCRUNPTlRFWFRfQ0xVU1RFUiBpcyAiYXJuOmF3czpla3M6dXMtZWFzdC0xOjEyMzQ1Njc4OTAxMjpjbHVzdGVyL215LWNsdXN0ZXItMDEiOgogICMKICAjICAgLSBQOUtfS1VCRUNPTlRFWFRfQ0xPVURfTkFNRT1la3MKICAjICAgLSBQOUtfS1VCRUNPTlRFWFRfQ0xPVURfQUNDT1VOVD0xMjM0NTY3ODkwMTIKICAjICAgLSBQOUtfS1VCRUNPTlRFWFRfQ0xPVURfWk9ORT11cy1lYXN0LTEKICAjICAgLSBQOUtfS1VCRUNPTlRFWFRfQ0xPVURfQ0xVU1RFUj1teS1jbHVzdGVyLTAxCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfS1VCRUNPTlRFWFRfREVGQVVMVF9DT05URU5UX0VYUEFOU0lPTj0KICAjIFNob3cgUDlLX0tVQkVDT05URVhUX0NMT1VEX0NMVVNURVIgaWYgaXQncyBub3QgZW1wdHkgYW5kIGZhbGwgYmFjayB0byBQOUtfS1VCRUNPTlRFWFRfTkFNRS4KICBQT1dFUkxFVkVMOUtfS1VCRUNPTlRFWFRfREVGQVVMVF9DT05URU5UX0VYUEFOU0lPTis9JyR7UDlLX0tVQkVDT05URVhUX0NMT1VEX0NMVVNURVI6LSR7UDlLX0tVQkVDT05URVhUX05BTUV9fScKICAjIEFwcGVuZCB0aGUgY3VycmVudCBjb250ZXh0J3MgbmFtZXNwYWNlIGlmIGl0J3Mgbm90ICJkZWZhdWx0Ii4KICBQT1dFUkxFVkVMOUtfS1VCRUNPTlRFWFRfREVGQVVMVF9DT05URU5UX0VYUEFOU0lPTis9JyR7JHs6LS8kUDlLX0tVQkVDT05URVhUX05BTUVTUEFDRX06Iy9kZWZhdWx0fScKCiAgIyBDdXN0b20gcHJlZml4LgogICMgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfS1VCRUNPTlRFWFRfUFJFRklYPSclMjQ4RmF0ICcKCiAgI1sgYXdzOiBhd3MgcHJvZmlsZSAoaHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL2NsaS9sYXRlc3QvdXNlcmd1aWRlL2NsaS1jb25maWd1cmUtcHJvZmlsZXMuaHRtbCkgXSMKICAjIFNob3cgYXdzIG9ubHkgd2hlbiB0aGUgdGhlIGNvbW1hbmQgeW91IGFyZSB0eXBpbmcgaW52b2tlcyBvbmUgb2YgdGhlc2UgdG9vbHMuCiAgIyBUaXA6IFJlbW92ZSB0aGUgbmV4dCBsaW5lIHRvIGFsd2F5cyBzaG93IGF3cy4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19BV1NfU0hPV19PTl9DT01NQU5EPSdhd3N8YXdsZXNzfHRlcnJhZm9ybXxwdWx1bWl8dGVycmFncnVudCcKCiAgIyBQT1dFUkxFVkVMOUtfQVdTX0NMQVNTRVMgaXMgYW4gYXJyYXkgd2l0aCBldmVuIG51bWJlciBvZiBlbGVtZW50cy4gVGhlIGZpcnN0IGVsZW1lbnQKICAjIGluIGVhY2ggcGFpciBkZWZpbmVzIGEgcGF0dGVybiBhZ2FpbnN0IHdoaWNoIHRoZSBjdXJyZW50IEFXUyBwcm9maWxlIGdldHMgbWF0Y2hlZC4KICAjIE1vcmUgc3BlY2lmaWNhbGx5LCBpdCdzIFA5S19DT05URU5UIHByaW9yIHRvIHRoZSBhcHBsaWNhdGlvbiBvZiBjb250ZXh0IGV4cGFuc2lvbiAoc2VlIGJlbG93KQogICMgdGhhdCBnZXRzIG1hdGNoZWQuIElmIHlvdSB1bnNldCBhbGwgUE9XRVJMRVZFTDlLX0FXU18qQ09OVEVOVF9FWFBBTlNJT04gcGFyYW1ldGVycywKICAjIHlvdSdsbCBzZWUgdGhpcyB2YWx1ZSBpbiB5b3VyIHByb21wdC4gVGhlIHNlY29uZCBlbGVtZW50IG9mIGVhY2ggcGFpciBpbgogICMgUE9XRVJMRVZFTDlLX0FXU19DTEFTU0VTIGRlZmluZXMgdGhlIHByb2ZpbGUgY2xhc3MuIFBhdHRlcm5zIGFyZSB0cmllZCBpbiBvcmRlci4gVGhlCiAgIyBmaXJzdCBtYXRjaCB3aW5zLgogICMKICAjIEZvciBleGFtcGxlLCBnaXZlbiB0aGVzZSBzZXR0aW5nczoKICAjCiAgIyAgIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0FXU19DTEFTU0VTPSgKICAjICAgICAnKnByb2QqJyAgUFJPRAogICMgICAgICcqdGVzdConICBURVNUCiAgIyAgICAgJyonICAgICAgIERFRkFVTFQpCiAgIwogICMgSWYgeW91ciBjdXJyZW50IEFXUyBwcm9maWxlIGlzICJjb21wYW55X3Rlc3QiLCBpdHMgY2xhc3MgaXMgVEVTVAogICMgYmVjYXVzZSAiY29tcGFueV90ZXN0IiBkb2Vzbid0IG1hdGNoIHRoZSBwYXR0ZXJuICcqcHJvZConIGJ1dCBkb2VzIG1hdGNoICcqdGVzdConLgogICMKICAjIFlvdSBjYW4gZGVmaW5lIGRpZmZlcmVudCBjb2xvcnMsIGljb25zIGFuZCBjb250ZW50IGV4cGFuc2lvbnMgZm9yIGRpZmZlcmVudCBjbGFzc2VzOgogICMKICAjICAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfQVdTX1RFU1RfRk9SRUdST1VORD0yOAogICMgICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19BV1NfVEVTVF9WSVNVQUxfSURFTlRJRklFUl9FWFBBTlNJT049J+KtkCcKICAjICAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfQVdTX1RFU1RfQ09OVEVOVF9FWFBBTlNJT049Jz4gJHtQOUtfQ09OVEVOVH0gPCcKICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19BV1NfQ0xBU1NFUz0oCiAgICAgICMgJypwcm9kKicgIFBST0QgICAgIyBUaGVzZSB2YWx1ZXMgYXJlIGV4YW1wbGVzIHRoYXQgYXJlIHVubGlrZWx5CiAgICAgICMgJyp0ZXN0KicgIFRFU1QgICAgIyB0byBtYXRjaCB5b3VyIG5lZWRzLiBDdXN0b21pemUgdGhlbSBhcyBuZWVkZWQuCiAgICAgICcqJyAgICAgICBERUZBVUxUKQogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0FXU19ERUZBVUxUX0ZPUkVHUk9VTkQ9MjA4CiAgIyB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19BV1NfREVGQVVMVF9WSVNVQUxfSURFTlRJRklFUl9FWFBBTlNJT049J+KtkCcKCiAgI1sgYXdzX2ViX2VudjogYXdzIGVsYXN0aWMgYmVhbnN0YWxrIGVudmlyb25tZW50IChodHRwczovL2F3cy5hbWF6b24uY29tL2VsYXN0aWNiZWFuc3RhbGsvKSBdIwogICMgQVdTIEVsYXN0aWMgQmVhbnN0YWxrIGVudmlyb25tZW50IGNvbG9yLgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0FXU19FQl9FTlZfRk9SRUdST1VORD03MAogICMgQ3VzdG9tIGljb24uCiAgIyB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19BV1NfRUJfRU5WX1ZJU1VBTF9JREVOVElGSUVSX0VYUEFOU0lPTj0n4q2QJwoKICAjIyMjIyMjIyMjWyBhenVyZTogYXp1cmUgYWNjb3VudCBuYW1lIChodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9lbi11cy9jbGkvYXp1cmUpIF0jIyMjIyMjIyMjCiAgIyBTaG93IGF6dXJlIG9ubHkgd2hlbiB0aGUgdGhlIGNvbW1hbmQgeW91IGFyZSB0eXBpbmcgaW52b2tlcyBvbmUgb2YgdGhlc2UgdG9vbHMuCiAgIyBUaXA6IFJlbW92ZSB0aGUgbmV4dCBsaW5lIHRvIGFsd2F5cyBzaG93IGF6dXJlLgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0FaVVJFX1NIT1dfT05fQ09NTUFORD0nYXp8dGVycmFmb3JtfHB1bHVtaXx0ZXJyYWdydW50JwogICMgQXp1cmUgYWNjb3VudCBuYW1lIGNvbG9yLgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0FaVVJFX0ZPUkVHUk9VTkQ9MzIKICAjIEN1c3RvbSBpY29uLgogICMgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfQVpVUkVfVklTVUFMX0lERU5USUZJRVJfRVhQQU5TSU9OPSfirZAnCgogICMjIyMjIyMjIyNbIGdjbG91ZDogZ29vZ2xlIGNsb3VkIGFjY291bnQgYW5kIHByb2plY3QgKGh0dHBzOi8vY2xvdWQuZ29vZ2xlLmNvbS8pIF0jIyMjIyMjIyMjIwogICMgU2hvdyBnY2xvdWQgb25seSB3aGVuIHRoZSB0aGUgY29tbWFuZCB5b3UgYXJlIHR5cGluZyBpbnZva2VzIG9uZSBvZiB0aGVzZSB0b29scy4KICAjIFRpcDogUmVtb3ZlIHRoZSBuZXh0IGxpbmUgdG8gYWx3YXlzIHNob3cgZ2Nsb3VkLgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0dDTE9VRF9TSE9XX09OX0NPTU1BTkQ9J2djbG91ZHxnY3MnCiAgICMgR29vZ2xlIGNsb3VkIGNvbG9yLgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0dDTE9VRF9GT1JFR1JPVU5EPTMyCgogICMgR29vZ2xlIGNsb3VkIGZvcm1hdC4gQ2hhbmdlIHRoZSB2YWx1ZSBvZiBQT1dFUkxFVkVMOUtfR0NMT1VEX1BBUlRJQUxfQ09OVEVOVF9FWFBBTlNJT04gYW5kL29yCiAgIyBQT1dFUkxFVkVMOUtfR0NMT1VEX0NPTVBMRVRFX0NPTlRFTlRfRVhQQU5TSU9OIGlmIHRoZSBkZWZhdWx0IGlzIHRvbyB2ZXJib3NlIG9yIG5vdCBpbmZvcm1hdGl2ZQogICMgZW5vdWdoLiBZb3UgY2FuIHVzZSB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnMgaW4gdGhlIGV4cGFuc2lvbnMuIEVhY2ggb2YgdGhlbSBjb3JyZXNwb25kcyB0byB0aGUKICAjIG91dHB1dCBvZiBgZ2Nsb3VkYCB0b29sLgogICMKICAjICAgUGFyYW1ldGVyICAgICAgICAgICAgICAgIHwgU291cmNlCiAgIyAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICAjICAgUDlLX0dDTE9VRF9DT05GSUdVUkFUSU9OIHwgZ2Nsb3VkIGNvbmZpZyBjb25maWd1cmF0aW9ucyBsaXN0IC0tZm9ybWF0PSd2YWx1ZShuYW1lKScKICAjICAgUDlLX0dDTE9VRF9BQ0NPVU5UICAgICAgIHwgZ2Nsb3VkIGNvbmZpZyBnZXQtdmFsdWUgYWNjb3VudAogICMgICBQOUtfR0NMT1VEX1BST0pFQ1RfSUQgICAgfCBnY2xvdWQgY29uZmlnIGdldC12YWx1ZSBwcm9qZWN0CiAgIyAgIFA5S19HQ0xPVURfUFJPSkVDVF9OQU1FICB8IGdjbG91ZCBwcm9qZWN0cyBkZXNjcmliZSAkUDlLX0dDTE9VRF9QUk9KRUNUX0lEIC0tZm9ybWF0PSd2YWx1ZShuYW1lKScKICAjCiAgIyBOb3RlOiAke1ZBUklBQkxFLy9cJS8lJX0gZXhwYW5kcyB0byAke1ZBUklBQkxFfSB3aXRoIGFsbCBvY2N1cnJlbmNlcyBvZiAnJScgcmVwbGFjZWQgd2l0aCAnJSUnLgogICMKICAjIE9idGFpbmluZyBwcm9qZWN0IG5hbWUgcmVxdWlyZXMgc2VuZGluZyBhIHJlcXVlc3QgdG8gR29vZ2xlIHNlcnZlcnMuIFRoaXMgY2FuIHRha2UgYSBsb25nIHRpbWUKICAjIGFuZCBldmVuIGZhaWwuIFdoZW4gcHJvamVjdCBuYW1lIGlzIHVua25vd24sIFA5S19HQ0xPVURfUFJPSkVDVF9OQU1FIGlzIG5vdCBzZXQgYW5kIGdjbG91ZAogICMgcHJvbXB0IHNlZ21lbnQgaXMgaW4gc3RhdGUgUEFSVElBTC4gV2hlbiBwcm9qZWN0IG5hbWUgZ2V0cyBrbm93biwgUDlLX0dDTE9VRF9QUk9KRUNUX05BTUUgZ2V0cwogICMgc2V0IGFuZCBnY2xvdWQgcHJvbXB0IHNlZ21lbnQgdHJhbnNpdGlvbnMgdG8gc3RhdGUgQ09NUExFVEUuCiAgIwogICMgWW91IGNhbiBjdXN0b21pemUgdGhlIGZvcm1hdCwgaWNvbiBhbmQgY29sb3JzIG9mIGdjbG91ZCBzZWdtZW50IHNlcGFyYXRlbHkgZm9yIHN0YXRlcyBQQVJUSUFMCiAgIyBhbmQgQ09NUExFVEUuIFlvdSBjYW4gYWxzbyBoaWRlIGdjbG91ZCBpbiBzdGF0ZSBQQVJUSUFMIGJ5IHNldHRpbmcKICAjIFBPV0VSTEVWRUw5S19HQ0xPVURfUEFSVElBTF9WSVNVQUxfSURFTlRJRklFUl9FWFBBTlNJT04gYW5kCiAgIyBQT1dFUkxFVkVMOUtfR0NMT1VEX1BBUlRJQUxfQ09OVEVOVF9FWFBBTlNJT04gdG8gZW1wdHkuCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfR0NMT1VEX1BBUlRJQUxfQ09OVEVOVF9FWFBBTlNJT049JyR7UDlLX0dDTE9VRF9QUk9KRUNUX0lELy9cJS8lJX0nCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfR0NMT1VEX0NPTVBMRVRFX0NPTlRFTlRfRVhQQU5TSU9OPScke1A5S19HQ0xPVURfUFJPSkVDVF9OQU1FLy9cJS8lJX0nCgogICMgU2VuZCBhIHJlcXVlc3QgdG8gR29vZ2xlIChieSBtZWFucyBvZiBgZ2Nsb3VkIHByb2plY3RzIGRlc2NyaWJlIC4uLmApIHRvIG9idGFpbiBwcm9qZWN0IG5hbWUKICAjIHRoaXMgb2Z0ZW4uIE5lZ2F0aXZlIHZhbHVlIGRpc2FibGVzIHBlcmlvZGljIHBvbGxpbmcuIEluIHRoaXMgbW9kZSBwcm9qZWN0IG5hbWUgaXMgcmV0cmlldmVkCiAgIyBvbmx5IHdoZW4gdGhlIGN1cnJlbnQgY29uZmlndXJhdGlvbiwgYWNjb3VudCBvciBwcm9qZWN0IGlkIGNoYW5nZXMuCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfR0NMT1VEX1JFRlJFU0hfUFJPSkVDVF9OQU1FX1NFQ09ORFM9NjAKCiAgIyBDdXN0b20gaWNvbi4KICAjIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0dDTE9VRF9WSVNVQUxfSURFTlRJRklFUl9FWFBBTlNJT049J+KtkCcKCiAgI1sgZ29vZ2xlX2FwcF9jcmVkOiBnb29nbGUgYXBwbGljYXRpb24gY3JlZGVudGlhbHMgKGh0dHBzOi8vY2xvdWQuZ29vZ2xlLmNvbS9kb2NzL2F1dGhlbnRpY2F0aW9uL3Byb2R1Y3Rpb24pIF0jCiAgIyBTaG93IGdvb2dsZV9hcHBfY3JlZCBvbmx5IHdoZW4gdGhlIHRoZSBjb21tYW5kIHlvdSBhcmUgdHlwaW5nIGludm9rZXMgb25lIG9mIHRoZXNlIHRvb2xzLgogICMgVGlwOiBSZW1vdmUgdGhlIG5leHQgbGluZSB0byBhbHdheXMgc2hvdyBnb29nbGVfYXBwX2NyZWQuCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfR09PR0xFX0FQUF9DUkVEX1NIT1dfT05fQ09NTUFORD0ndGVycmFmb3JtfHB1bHVtaXx0ZXJyYWdydW50JwoKICAjIEdvb2dsZSBhcHBsaWNhdGlvbiBjcmVkZW50aWFscyBjbGFzc2VzIGZvciB0aGUgcHVycG9zZSBvZiB1c2luZyBkaWZmZXJlbnQgY29sb3JzLCBpY29ucyBhbmQKICAjIGV4cGFuc2lvbnMgd2l0aCBkaWZmZXJlbnQgY3JlZGVudGlhbHMuCiAgIwogICMgUE9XRVJMRVZFTDlLX0dPT0dMRV9BUFBfQ1JFRF9DTEFTU0VTIGlzIGFuIGFycmF5IHdpdGggZXZlbiBudW1iZXIgb2YgZWxlbWVudHMuIFRoZSBmaXJzdAogICMgZWxlbWVudCBpbiBlYWNoIHBhaXIgZGVmaW5lcyBhIHBhdHRlcm4gYWdhaW5zdCB3aGljaCB0aGUgY3VycmVudCBrdWJlcm5ldGVzIGNvbnRleHQgZ2V0cwogICMgbWF0Y2hlZC4gTW9yZSBzcGVjaWZpY2FsbHksIGl0J3MgUDlLX0NPTlRFTlQgcHJpb3IgdG8gdGhlIGFwcGxpY2F0aW9uIG9mIGNvbnRleHQgZXhwYW5zaW9uCiAgIyAoc2VlIGJlbG93KSB0aGF0IGdldHMgbWF0Y2hlZC4gSWYgeW91IHVuc2V0IGFsbCBQT1dFUkxFVkVMOUtfR09PR0xFX0FQUF9DUkVEXypDT05URU5UX0VYUEFOU0lPTgogICMgcGFyYW1ldGVycywgeW91J2xsIHNlZSB0aGlzIHZhbHVlIGluIHlvdXIgcHJvbXB0LiBUaGUgc2Vjb25kIGVsZW1lbnQgb2YgZWFjaCBwYWlyIGluCiAgIyBQT1dFUkxFVkVMOUtfR09PR0xFX0FQUF9DUkVEX0NMQVNTRVMgZGVmaW5lcyB0aGUgY29udGV4dCBjbGFzcy4gUGF0dGVybnMgYXJlIHRyaWVkIGluIG9yZGVyLgogICMgVGhlIGZpcnN0IG1hdGNoIHdpbnMuCiAgIwogICMgRm9yIGV4YW1wbGUsIGdpdmVuIHRoZXNlIHNldHRpbmdzOgogICMKICAjICAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfR09PR0xFX0FQUF9DUkVEX0NMQVNTRVM9KAogICMgICAgICcqOipwcm9kKjoqJyAgUFJPRAogICMgICAgICcqOip0ZXN0KjoqJyAgVEVTVAogICMgICAgICcqJyAgICAgICAgICAgREVGQVVMVCkKICAjCiAgIyBJZiB5b3VyIGN1cnJlbnQgR29vZ2xlIGFwcGxpY2F0aW9uIGNyZWRlbnRpYWxzIGlzICJzZXJ2aWNlX2FjY291bnQgZGVhdGhyYXktdGVzdGluZyB4QHkuY29tIiwKICAjIGl0cyBjbGFzcyBpcyBURVNUIGJlY2F1c2UgaXQgZG9lc24ndCBtYXRjaCB0aGUgcGF0dGVybiAnKiAqcHJvZCogKicgYnV0IGRvZXMgbWF0Y2ggJyogKnRlc3QqIConLgogICMKICAjIFlvdSBjYW4gZGVmaW5lIGRpZmZlcmVudCBjb2xvcnMsIGljb25zIGFuZCBjb250ZW50IGV4cGFuc2lvbnMgZm9yIGRpZmZlcmVudCBjbGFzc2VzOgogICMKICAjICAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfR09PR0xFX0FQUF9DUkVEX1RFU1RfRk9SRUdST1VORD0yOAogICMgICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19HT09HTEVfQVBQX0NSRURfVEVTVF9WSVNVQUxfSURFTlRJRklFUl9FWFBBTlNJT049J+KtkCcKICAjICAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfR09PR0xFX0FQUF9DUkVEX1RFU1RfQ09OVEVOVF9FWFBBTlNJT049JyRQOUtfR09PR0xFX0FQUF9DUkVEX1BST0pFQ1RfSUQnCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfR09PR0xFX0FQUF9DUkVEX0NMQVNTRVM9KAogICAgICAjICcqOipwcm9kKjoqJyAgUFJPRCAgICAjIFRoZXNlIHZhbHVlcyBhcmUgZXhhbXBsZXMgdGhhdCBhcmUgdW5saWtlbHkKICAgICAgIyAnKjoqdGVzdCo6KicgIFRFU1QgICAgIyB0byBtYXRjaCB5b3VyIG5lZWRzLiBDdXN0b21pemUgdGhlbSBhcyBuZWVkZWQuCiAgICAgICcqJyAgICAgICAgICAgICBERUZBVUxUKQogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0dPT0dMRV9BUFBfQ1JFRF9ERUZBVUxUX0ZPUkVHUk9VTkQ9MzIKICAjIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0dPT0dMRV9BUFBfQ1JFRF9ERUZBVUxUX1ZJU1VBTF9JREVOVElGSUVSX0VYUEFOU0lPTj0n4q2QJwoKICAjIFVzZSBQT1dFUkxFVkVMOUtfR09PR0xFX0FQUF9DUkVEX0NPTlRFTlRfRVhQQU5TSU9OIHRvIHNwZWNpZnkgdGhlIGNvbnRlbnQgZGlzcGxheWVkIGJ5CiAgIyBnb29nbGVfYXBwX2NyZWQgc2VnbWVudC4gUGFyYW1ldGVyIGV4cGFuc2lvbnMgYXJlIHZlcnkgZmxleGlibGUgYW5kIGZhc3QsIHRvby4gU2VlIHJlZmVyZW5jZToKICAjIGh0dHA6Ly96c2guc291cmNlZm9yZ2UubmV0L0RvYy9SZWxlYXNlL0V4cGFuc2lvbi5odG1sI1BhcmFtZXRlci1FeHBhbnNpb24uCiAgIwogICMgWW91IGNhbiB1c2UgdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzIGluIHRoZSBleHBhbnNpb24uIEVhY2ggb2YgdGhlbSBjb3JyZXNwb25kcyB0byBvbmUgb2YgdGhlCiAgIyBmaWVsZHMgaW4gdGhlIEpTT04gZmlsZSBwb2ludGVkIHRvIGJ5IEdPT0dMRV9BUFBMSUNBVElPTl9DUkVERU5USUFMUy4KICAjCiAgIyAgIFBhcmFtZXRlciAgICAgICAgICAgICAgICAgICAgICAgIHwgSlNPTiBrZXkgZmlsZSBmaWVsZAogICMgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rLS0tLS0tLS0tLS0tLS0tCiAgIyAgIFA5S19HT09HTEVfQVBQX0NSRURfVFlQRSAgICAgICAgIHwgdHlwZQogICMgICBQOUtfR09PR0xFX0FQUF9DUkVEX1BST0pFQ1RfSUQgICB8IHByb2plY3RfaWQKICAjICAgUDlLX0dPT0dMRV9BUFBfQ1JFRF9DTElFTlRfRU1BSUwgfCBjbGllbnRfZW1haWwKICAjCiAgIyBOb3RlOiAke1ZBUklBQkxFLy9cJS8lJX0gZXhwYW5kcyB0byAke1ZBUklBQkxFfSB3aXRoIGFsbCBvY2N1cnJlbmNlcyBvZiAnJScgcmVwbGFjZWQgYnkgJyUlJy4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19HT09HTEVfQVBQX0NSRURfREVGQVVMVF9DT05URU5UX0VYUEFOU0lPTj0nJHtQOUtfR09PR0xFX0FQUF9DUkVEX1BST0pFQ1RfSUQvL1wlLyUlfScKCiAgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1sgcHVibGljX2lwOiBwdWJsaWMgSVAgYWRkcmVzcyBdIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICMgUHVibGljIElQIGNvbG9yLgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX1BVQkxJQ19JUF9GT1JFR1JPVU5EPTk0CiAgIyBDdXN0b20gaWNvbi4KICAjIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX1BVQkxJQ19JUF9WSVNVQUxfSURFTlRJRklFUl9FWFBBTlNJT049J+KtkCcKCiAgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjWyB2cG5faXA6IHZpcnR1YWwgcHJpdmF0ZSBuZXR3b3JrIGluZGljYXRvciBdIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICMgVlBOIElQIGNvbG9yLgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX1ZQTl9JUF9GT1JFR1JPVU5EPTgxCiAgIyBXaGVuIG9uIFZQTiwgc2hvdyBqdXN0IGFuIGljb24gd2l0aG91dCB0aGUgSVAgYWRkcmVzcy4KICAjIFRpcDogVG8gZGlzcGxheSB0aGUgcHJpdmF0ZSBJUCBhZGRyZXNzIHdoZW4gb24gVlBOLCByZW1vdmUgdGhlIG5leHQgbGluZS4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19WUE5fSVBfQ09OVEVOVF9FWFBBTlNJT049CiAgIyBSZWd1bGFyIGV4cHJlc3Npb24gZm9yIHRoZSBWUE4gbmV0d29yayBpbnRlcmZhY2UuIFJ1biBgaWZjb25maWdgIG9yIGBpcCAtNCBhIHNob3dgIHdoaWxlIG9uIFZQTgogICMgdG8gc2VlIHRoZSBuYW1lIG9mIHRoZSBpbnRlcmZhY2UuCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfVlBOX0lQX0lOVEVSRkFDRT0nKGdwZHx3Z3woLip0dW4pfHRhaWxzY2FsZSlbMC05XSonCiAgIyBJZiBzZXQgdG8gdHJ1ZSwgc2hvdyBvbmUgc2VnbWVudCBwZXIgbWF0Y2hpbmcgbmV0d29yayBpbnRlcmZhY2UuIElmIHNldCB0byBmYWxzZSwgc2hvdyBvbmx5CiAgIyBvbmUgc2VnbWVudCBjb3JyZXNwb25kaW5nIHRvIHRoZSBmaXJzdCBtYXRjaGluZyBuZXR3b3JrIGludGVyZmFjZS4KICAjIFRpcDogSWYgeW91IHNldCBpdCB0byB0cnVlLCB5b3UnbGwgcHJvYmFibHkgd2FudCB0byB1bnNldCBQT1dFUkxFVkVMOUtfVlBOX0lQX0NPTlRFTlRfRVhQQU5TSU9OLgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX1ZQTl9JUF9TSE9XX0FMTD1mYWxzZQogICMgQ3VzdG9tIGljb24uCiAgIyB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19WUE5fSVBfVklTVUFMX0lERU5USUZJRVJfRVhQQU5TSU9OPSfirZAnCgogICMjIyMjIyMjIyMjWyBpcDogaXAgYWRkcmVzcyBhbmQgYmFuZHdpZHRoIHVzYWdlIGZvciBhIHNwZWNpZmllZCBuZXR3b3JrIGludGVyZmFjZSBdIyMjIyMjIyMjIyMKICAjIElQIGNvbG9yLgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0lQX0ZPUkVHUk9VTkQ9MzgKICAjIFRoZSBmb2xsb3dpbmcgcGFyYW1ldGVycyBhcmUgYWNjZXNzaWJsZSB3aXRoaW4gdGhlIGV4cGFuc2lvbjoKICAjCiAgIyAgIFBhcmFtZXRlciAgICAgICAgICAgICB8IE1lYW5pbmcKICAjICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSstLS0tLS0tLS0tLS0tLS0KICAjICAgUDlLX0lQX0lQICAgICAgICAgfCBJUCBhZGRyZXNzCiAgIyAgIFA5S19JUF9JTlRFUkZBQ0UgIHwgbmV0d29yayBpbnRlcmZhY2UKICAjICAgUDlLX0lQX1JYX0JZVEVTICAgfCB0b3RhbCBudW1iZXIgb2YgYnl0ZXMgcmVjZWl2ZWQKICAjICAgUDlLX0lQX1RYX0JZVEVTICAgfCB0b3RhbCBudW1iZXIgb2YgYnl0ZXMgc2VudAogICMgICBQOUtfSVBfUlhfUkFURSAgICB8IHJlY2VpdmUgcmF0ZSAoc2luY2UgbGFzdCBwcm9tcHQpCiAgIyAgIFA5S19JUF9UWF9SQVRFICAgIHwgc2VuZCByYXRlIChzaW5jZSBsYXN0IHByb21wdCkKICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19JUF9DT05URU5UX0VYUEFOU0lPTj0nJHtQOUtfSVBfUlhfUkFURTorJTcwRuKHoyRQOUtfSVBfUlhfUkFURSB9JHtQOUtfSVBfVFhfUkFURTorJTIxNUbih6EkUDlLX0lQX1RYX1JBVEUgfSUzOEYkUDlLX0lQX0lQJwogICMgU2hvdyBpbmZvcm1hdGlvbiBmb3IgdGhlIGZpcnN0IG5ldHdvcmsgaW50ZXJmYWNlIHdob3NlIG5hbWUgbWF0Y2hlcyB0aGlzIHJlZ3VsYXIgZXhwcmVzc2lvbi4KICAjIFJ1biBgaWZjb25maWdgIG9yIGBpcCAtNCBhIHNob3dgIHRvIHNlZSB0aGUgbmFtZXMgb2YgYWxsIG5ldHdvcmsgaW50ZXJmYWNlcy4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19JUF9JTlRFUkZBQ0U9J1tld10uKicKICAjIEN1c3RvbSBpY29uLgogICMgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfSVBfVklTVUFMX0lERU5USUZJRVJfRVhQQU5TSU9OPSfirZAnCgogICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNbIHByb3h5OiBzeXN0ZW0td2lkZSBodHRwL2h0dHBzL2Z0cCBwcm94eSBdIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAjIFByb3h5IGNvbG9yLgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX1BST1hZX0ZPUkVHUk9VTkQ9NjgKICAjIEN1c3RvbSBpY29uLgogICMgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfUFJPWFlfVklTVUFMX0lERU5USUZJRVJfRVhQQU5TSU9OPSfirZAnCgogICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjWyBiYXR0ZXJ5OiBpbnRlcm5hbCBiYXR0ZXJ5IF0jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKICAjIFNob3cgYmF0dGVyeSBpbiByZWQgd2hlbiBpdCdzIGJlbG93IHRoaXMgbGV2ZWwgYW5kIG5vdCBjb25uZWN0ZWQgdG8gcG93ZXIgc3VwcGx5LgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0JBVFRFUllfTE9XX1RIUkVTSE9MRD0yMAogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0JBVFRFUllfTE9XX0ZPUkVHUk9VTkQ9MTYwCiAgIyBTaG93IGJhdHRlcnkgaW4gZ3JlZW4gd2hlbiBpdCdzIGNoYXJnaW5nIG9yIGZ1bGx5IGNoYXJnZWQuCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfQkFUVEVSWV97Q0hBUkdJTkcsQ0hBUkdFRH1fRk9SRUdST1VORD03MAogICMgU2hvdyBiYXR0ZXJ5IGluIHllbGxvdyB3aGVuIGl0J3MgZGlzY2hhcmdpbmcuCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfQkFUVEVSWV9ESVNDT05ORUNURURfRk9SRUdST1VORD0xNzgKICAjIEJhdHRlcnkgcGljdG9ncmFtcyBnb2luZyBmcm9tIGxvdyB0byBoaWdoIGxldmVsIG9mIGNoYXJnZS4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19CQVRURVJZX1NUQUdFUz0nXHVmNThkXHVmNTc5XHVmNTdhXHVmNTdiXHVmNTdjXHVmNTdkXHVmNTdlXHVmNTdmXHVmNTgwXHVmNTgxXHVmNTc4JwogICMgRG9uJ3Qgc2hvdyB0aGUgcmVtYWluaW5nIHRpbWUgdG8gY2hhcmdlL2Rpc2NoYXJnZS4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19CQVRURVJZX1ZFUkJPU0U9ZmFsc2UKCiAgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjI1sgd2lmaTogd2lmaSBzcGVlZCBdIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogICMgV2lGaSBjb2xvci4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19XSUZJX0ZPUkVHUk9VTkQ9NjgKICAjIEN1c3RvbSBpY29uLgogICMgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfV0lGSV9WSVNVQUxfSURFTlRJRklFUl9FWFBBTlNJT049J+KtkCcKCiAgIyBVc2UgZGlmZmVyZW50IGNvbG9ycyBhbmQgaWNvbnMgZGVwZW5kaW5nIG9uIHNpZ25hbCBzdHJlbmd0aCAoJFA5S19XSUZJX0JBUlMpLgogICMKICAjICAgIyBXaWZpIGNvbG9ycyBhbmQgaWNvbnMgZm9yIGRpZmZlcmVudCBzaWduYWwgc3RyZW5ndGggbGV2ZWxzIChsb3cgdG8gaGlnaCkuCiAgIyAgIHR5cGVzZXQgLWcgbXlfd2lmaV9mZz0oNjggNjggNjggNjggNjgpICAgICAgICAgICAgICAgICAgICAgICAgICAgIyA8LS0gY2hhbmdlIHRoZXNlIHZhbHVlcwogICMgICB0eXBlc2V0IC1nIG15X3dpZmlfaWNvbj0oJ1dpRmknICdXaUZpJyAnV2lGaScgJ1dpRmknICdXaUZpJykgICAgICMgPC0tIGNoYW5nZSB0aGVzZSB2YWx1ZXMKICAjCiAgIyAgIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX1dJRklfQ09OVEVOVF9FWFBBTlNJT049JyVGeyR7bXlfd2lmaV9mZ1tQOUtfV0lGSV9CQVJTKzFdfX0kUDlLX1dJRklfTEFTVF9UWF9SQVRFIE1icHMnCiAgIyAgIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX1dJRklfVklTVUFMX0lERU5USUZJRVJfRVhQQU5TSU9OPSclRnske215X3dpZmlfZmdbUDlLX1dJRklfQkFSUysxXX19JHtteV93aWZpX2ljb25bUDlLX1dJRklfQkFSUysxXX0nCiAgIwogICMgVGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzIGFyZSBhY2Nlc3NpYmxlIHdpdGhpbiB0aGUgZXhwYW5zaW9uczoKICAjCiAgIyAgIFBhcmFtZXRlciAgICAgICAgICAgICB8IE1lYW5pbmcKICAjICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSstLS0tLS0tLS0tLS0tLS0KICAjICAgUDlLX1dJRklfU1NJRCAgICAgICAgIHwgc2VydmljZSBzZXQgaWRlbnRpZmllciwgYS5rLmEuIG5ldHdvcmsgbmFtZQogICMgICBQOUtfV0lGSV9MSU5LX0FVVEggICAgfCBhdXRoZW50aWNhdGlvbiBwcm90b2NvbCBzdWNoIGFzICJ3cGEyLXBzayIgb3IgIm5vbmUiOyBlbXB0eSBpZiB1bmtub3duCiAgIyAgIFA5S19XSUZJX0xBU1RfVFhfUkFURSB8IHdpcmVsZXNzIHRyYW5zbWl0IHJhdGUgaW4gbWVnYWJpdHMgcGVyIHNlY29uZAogICMgICBQOUtfV0lGSV9SU1NJICAgICAgICAgfCBzaWduYWwgc3RyZW5ndGggaW4gZEJtLCBmcm9tIC0xMjAgdG8gMAogICMgICBQOUtfV0lGSV9OT0lTRSAgICAgICAgfCBub2lzZSBpbiBkQm0sIGZyb20gLTEyMCB0byAwCiAgIyAgIFA5S19XSUZJX0JBUlMgICAgICAgICB8IHNpZ25hbCBzdHJlbmd0aCBpbiBiYXJzLCBmcm9tIDAgdG8gNCAoZGVyaXZlZCBmcm9tIFA5S19XSUZJX1JTU0kgYW5kIFA5S19XSUZJX05PSVNFKQoKICAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyNbIHRpbWU6IGN1cnJlbnQgdGltZSBdIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAgIyBDdXJyZW50IHRpbWUgY29sb3IuCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfVElNRV9GT1JFR1JPVU5EPTY2CiAgIyBGb3JtYXQgZm9yIHRoZSBjdXJyZW50IHRpbWU6IDA5OjUxOjAyLiBTZWUgYG1hbiAzIHN0cmZ0aW1lYC4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19USU1FX0ZPUk1BVD0nJUR7JUg6JU06JVN9JwogICMgSWYgc2V0IHRvIHRydWUsIHRpbWUgd2lsbCB1cGRhdGUgd2hlbiB5b3UgaGl0IGVudGVyLiBUaGlzIHdheSBwcm9tcHRzIGZvciB0aGUgcGFzdAogICMgY29tbWFuZHMgd2lsbCBjb250YWluIHRoZSBzdGFydCB0aW1lcyBvZiB0aGVpciBjb21tYW5kcyBhcyBvcHBvc2VkIHRvIHRoZSBkZWZhdWx0CiAgIyBiZWhhdmlvciB3aGVyZSB0aGV5IGNvbnRhaW4gdGhlIGVuZCB0aW1lcyBvZiB0aGVpciBwcmVjZWRpbmcgY29tbWFuZHMuCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfVElNRV9VUERBVEVfT05fQ09NTUFORD1mYWxzZQogICMgQ3VzdG9tIGljb24uCiAgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfVElNRV9WSVNVQUxfSURFTlRJRklFUl9FWFBBTlNJT049CiAgIyBDdXN0b20gcHJlZml4LgogICMgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfVElNRV9QUkVGSVg9JyUyNDhGYXQgJwoKICAjIEV4YW1wbGUgb2YgYSB1c2VyLWRlZmluZWQgcHJvbXB0IHNlZ21lbnQuIEZ1bmN0aW9uIHByb21wdF9leGFtcGxlIHdpbGwgYmUgY2FsbGVkIG9uIGV2ZXJ5CiAgIyBwcm9tcHQgaWYgYGV4YW1wbGVgIHByb21wdCBzZWdtZW50IGlzIGFkZGVkIHRvIFBPV0VSTEVWRUw5S19MRUZUX1BST01QVF9FTEVNRU5UUyBvcgogICMgUE9XRVJMRVZFTDlLX1JJR0hUX1BST01QVF9FTEVNRU5UUy4gSXQgZGlzcGxheXMgYW4gaWNvbiBhbmQgb3JhbmdlIHRleHQgZ3JlZXRpbmcgdGhlIHVzZXIuCiAgIwogICMgVHlwZSBgcDEwayBoZWxwIHNlZ21lbnRgIGZvciBkb2N1bWVudGF0aW9uIGFuZCBhIG1vcmUgc29waGlzdGljYXRlZCBleGFtcGxlLgogIGZ1bmN0aW9uIHByb21wdF9leGFtcGxlKCkgewogICAgcDEwayBzZWdtZW50IC1mIDIwOCAtaSAn4q2QJyAtdCAnaGVsbG8sICVuJwogIH0KCiAgIyBVc2VyLWRlZmluZWQgcHJvbXB0IHNlZ21lbnRzIG1heSBvcHRpb25hbGx5IHByb3ZpZGUgYW4gaW5zdGFudF9wcm9tcHRfKiBmdW5jdGlvbi4gSXRzIGpvYgogICMgaXMgdG8gZ2VuZXJhdGUgdGhlIHByb21wdCBzZWdtZW50IGZvciBkaXNwbGF5IGluIGluc3RhbnQgcHJvbXB0LiBTZWUKICAjIGh0dHBzOi8vZ2l0aHViLmNvbS9yb21rYXR2L3Bvd2VybGV2ZWwxMGsvYmxvYi9tYXN0ZXIvUkVBRE1FLm1kI2luc3RhbnQtcHJvbXB0LgogICMKICAjIFBvd2VybGV2ZWwxMGsgd2lsbCBjYWxsIGluc3RhbnRfcHJvbXB0XyogYXQgdGhlIHNhbWUgdGltZSBhcyB0aGUgcmVndWxhciBwcm9tcHRfKiBmdW5jdGlvbgogICMgYW5kIHdpbGwgcmVjb3JkIGFsbCBgcDEwayBzZWdtZW50YCBjYWxscyBpdCBtYWtlcy4gV2hlbiBkaXNwbGF5aW5nIGluc3RhbnQgcHJvbXB0LCBQb3dlcmxldmVsMTBrCiAgIyB3aWxsIHJlcGxheSB0aGVzZSBjYWxscyB3aXRob3V0IGFjdHVhbGx5IGNhbGxpbmcgaW5zdGFudF9wcm9tcHRfKi4gSXQgaXMgaW1wZXJhdGl2ZSB0aGF0CiAgIyBpbnN0YW50X3Byb21wdF8qIGFsd2F5cyBtYWtlcyB0aGUgc2FtZSBgcDEwayBzZWdtZW50YCBjYWxscyByZWdhcmRsZXNzIG9mIGVudmlyb25tZW50LiBJZiB0aGlzCiAgIyBydWxlIGlzIG5vdCBvYnNlcnZlZCwgdGhlIGNvbnRlbnQgb2YgaW5zdGFudCBwcm9tcHQgd2lsbCBiZSBpbmNvcnJlY3QuCiAgIwogICMgVXN1YWxseSwgeW91IHNob3VsZCBlaXRoZXIgbm90IGRlZmluZSBpbnN0YW50X3Byb21wdF8qIG9yIHNpbXBseSBjYWxsIHByb21wdF8qIGZyb20gaXQuIElmCiAgIyBpbnN0YW50X3Byb21wdF8qIGlzIG5vdCBkZWZpbmVkIGZvciBhIHNlZ21lbnQsIHRoZSBzZWdtZW50IHdvbid0IGJlIHNob3duIGluIGluc3RhbnQgcHJvbXB0LgogIGZ1bmN0aW9uIGluc3RhbnRfcHJvbXB0X2V4YW1wbGUoKSB7CiAgICAjIFNpbmNlIHByb21wdF9leGFtcGxlIGFsd2F5cyBtYWtlcyB0aGUgc2FtZSBgcDEwayBzZWdtZW50YCBjYWxscywgd2UgY2FuIGNhbGwgaXQgZnJvbQogICAgIyBpbnN0YW50X3Byb21wdF9leGFtcGxlLiBUaGlzIHdpbGwgZ2l2ZSB1cyB0aGUgc2FtZSBgZXhhbXBsZWAgcHJvbXB0IHNlZ21lbnQgaW4gdGhlIGluc3RhbnQKICAgICMgYW5kIHJlZ3VsYXIgcHJvbXB0cy4KICAgIHByb21wdF9leGFtcGxlCiAgfQoKICAjIFVzZXItZGVmaW5lZCBwcm9tcHQgc2VnbWVudHMgY2FuIGJlIGN1c3RvbWl6ZWQgdGhlIHNhbWUgd2F5IGFzIGJ1aWx0LWluIHNlZ21lbnRzLgogICMgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfRVhBTVBMRV9GT1JFR1JPVU5EPTIwOAogICMgdHlwZXNldCAtZyBQT1dFUkxFVkVMOUtfRVhBTVBMRV9WSVNVQUxfSURFTlRJRklFUl9FWFBBTlNJT049J+KtkCcKCiAgIyBUcmFuc2llbnQgcHJvbXB0IHdvcmtzIHNpbWlsYXJseSB0byB0aGUgYnVpbHRpbiB0cmFuc2llbnRfcnByb21wdCBvcHRpb24uIEl0IHRyaW1zIGRvd24gcHJvbXB0CiAgIyB3aGVuIGFjY2VwdGluZyBhIGNvbW1hbmQgbGluZS4gU3VwcG9ydGVkIHZhbHVlczoKICAjCiAgIyAgIC0gb2ZmOiAgICAgIERvbid0IGNoYW5nZSBwcm9tcHQgd2hlbiBhY2NlcHRpbmcgYSBjb21tYW5kIGxpbmUuCiAgIyAgIC0gYWx3YXlzOiAgIFRyaW0gZG93biBwcm9tcHQgd2hlbiBhY2NlcHRpbmcgYSBjb21tYW5kIGxpbmUuCiAgIyAgIC0gc2FtZS1kaXI6IFRyaW0gZG93biBwcm9tcHQgd2hlbiBhY2NlcHRpbmcgYSBjb21tYW5kIGxpbmUgdW5sZXNzIHRoaXMgaXMgdGhlIGZpcnN0IGNvbW1hbmQKICAjICAgICAgICAgICAgICAgdHlwZWQgYWZ0ZXIgY2hhbmdpbmcgY3VycmVudCB3b3JraW5nIGRpcmVjdG9yeS4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19UUkFOU0lFTlRfUFJPTVBUPW9mZgoKICAjIEluc3RhbnQgcHJvbXB0IG1vZGUuCiAgIwogICMgICAtIG9mZjogICAgIERpc2FibGUgaW5zdGFudCBwcm9tcHQuIENob29zZSB0aGlzIGlmIHlvdSd2ZSB0cmllZCBpbnN0YW50IHByb21wdCBhbmQgZm91bmQKICAjICAgICAgICAgICAgICBpdCBpbmNvbXBhdGlibGUgd2l0aCB5b3VyIHpzaCBjb25maWd1cmF0aW9uIGZpbGVzLgogICMgICAtIHF1aWV0OiAgIEVuYWJsZSBpbnN0YW50IHByb21wdCBhbmQgZG9uJ3QgcHJpbnQgd2FybmluZ3Mgd2hlbiBkZXRlY3RpbmcgY29uc29sZSBvdXRwdXQKICAjICAgICAgICAgICAgICBkdXJpbmcgenNoIGluaXRpYWxpemF0aW9uLiBDaG9vc2UgdGhpcyBpZiB5b3UndmUgcmVhZCBhbmQgdW5kZXJzdG9vZAogICMgICAgICAgICAgICAgIGh0dHBzOi8vZ2l0aHViLmNvbS9yb21rYXR2L3Bvd2VybGV2ZWwxMGsvYmxvYi9tYXN0ZXIvUkVBRE1FLm1kI2luc3RhbnQtcHJvbXB0LgogICMgICAtIHZlcmJvc2U6IEVuYWJsZSBpbnN0YW50IHByb21wdCBhbmQgcHJpbnQgYSB3YXJuaW5nIHdoZW4gZGV0ZWN0aW5nIGNvbnNvbGUgb3V0cHV0IGR1cmluZwogICMgICAgICAgICAgICAgIHpzaCBpbml0aWFsaXphdGlvbi4gQ2hvb3NlIHRoaXMgaWYgeW91J3ZlIG5ldmVyIHRyaWVkIGluc3RhbnQgcHJvbXB0LCBoYXZlbid0CiAgIyAgICAgICAgICAgICAgc2VlbiB0aGUgd2FybmluZywgb3IgaWYgeW91IGFyZSB1bnN1cmUgd2hhdCB0aGlzIGFsbCBtZWFucy4KICB0eXBlc2V0IC1nIFBPV0VSTEVWRUw5S19JTlNUQU5UX1BST01QVD12ZXJib3NlCgogICMgSG90IHJlbG9hZCBhbGxvd3MgeW91IHRvIGNoYW5nZSBQT1dFUkxFVkVMOUsgb3B0aW9ucyBhZnRlciBQb3dlcmxldmVsMTBrIGhhcyBiZWVuIGluaXRpYWxpemVkLgogICMgRm9yIGV4YW1wbGUsIHlvdSBjYW4gdHlwZSBQT1dFUkxFVkVMOUtfQkFDS0dST1VORD1yZWQgYW5kIHNlZSB5b3VyIHByb21wdCB0dXJuIHJlZC4gSG90IHJlbG9hZAogICMgY2FuIHNsb3cgZG93biBwcm9tcHQgYnkgMS0yIG1pbGxpc2Vjb25kcywgc28gaXQncyBiZXR0ZXIgdG8ga2VlcCBpdCB0dXJuZWQgb2ZmIHVubGVzcyB5b3UKICAjIHJlYWxseSBuZWVkIGl0LgogIHR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0RJU0FCTEVfSE9UX1JFTE9BRD10cnVlCgogICMgSWYgcDEwayBpcyBhbHJlYWR5IGxvYWRlZCwgcmVsb2FkIGNvbmZpZ3VyYXRpb24uCiAgIyBUaGlzIHdvcmtzIGV2ZW4gd2l0aCBQT1dFUkxFVkVMOUtfRElTQUJMRV9IT1RfUkVMT0FEPXRydWUuCiAgKCggISAkK2Z1bmN0aW9uc1twMTBrXSApKSB8fCBwMTBrIHJlbG9hZAp9CgojIFRlbGwgYHAxMGsgY29uZmlndXJlYCB3aGljaCBmaWxlIGl0IHNob3VsZCBvdmVyd3JpdGUuCnR5cGVzZXQgLWcgUE9XRVJMRVZFTDlLX0NPTkZJR19GSUxFPSR7JHsoJSk6LSV4fTphfQoKKCggJHsjcDEwa19jb25maWdfb3B0c30gKSkgJiYgc2V0b3B0ICR7cDEwa19jb25maWdfb3B0c1tAXX0KJ2J1aWx0aW4nICd1bnNldCcgJ3AxMGtfY29uZmlnX29wdHMnCg=="
)
